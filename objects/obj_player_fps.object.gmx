<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fps_collisions</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player_fps</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initalize the player 
x = obj_player_rpg.player_x
y = obj_player_rpg.player_y
z = 32;
//global.dir = 0;
global.pitch = 0;

//view variables
vect_x = lengthdir_x(32,global.dir);
vect_y = lengthdir_y(32,global.dir);
distortion_x = lengthdir_x(32,global.dir);
distortion_y = lengthdir_y(32,global.dir);
locker_x = lengthdir_x(32,global.dir);
locker_y = lengthdir_y(32,global.dir);

//movement variables
target_dir = 90;
target_x = x;
target_y = y;

// set the draw color
draw_set_colour(c_white);

spr = spr_up_fps;
spr_dir = spr_up_fps;
soundvol = 0;
sndstep = snd_steps_school;
sndcreate = audio_play_sound(sndstep,10,true);;
indx = 0;
toolmove = 0;

xtool = 277;
ytool = 136;
shifter = 0;
num = 0;
color = 255;
r = 88;
b = 46;
g = 44;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(snd_steps_school);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>background_color = make_colour_rgb(r,b,g)
//determine to move tool or player
if (global.square_pressed &amp;&amp; toolmove = 0) {
audio_play_sound(snd_green_tool_toggleon,1,false);
} else if(global.square_pressed &amp;&amp; toolmove = 1) {
audio_play_sound(snd_green_tool_toggleoff,1,false);
}
if (global.square_pressed) {
toolmove = 1 - toolmove;
}

if(toolmove = 0) {
num = 0;

color = scr_approach(color,255,4);
r = scr_approach(r,88,2);
b = scr_approach(b,46,1);
g = scr_approach(g,44,1);

///Movement control
if(!instance_exists(obj_locker_active)) {

    var vect_x = lengthdir_x(2, target_dir);
    var vect_y = lengthdir_y(2, target_dir);

if (global.up_key) {
    //movement vector
    //x
    if(!place_meeting(target_x+vect_x,target_y,obj_wall)) {
        target_x += vect_x;
    } else {
    
        while !place_meeting(target_x+sign(vect_x),target_y,obj_wall) {
            target_x += sign(vect_x)
        }
    
    }
    //y
    if(!place_meeting(target_x,target_y+vect_y,obj_wall)) {
        target_y += vect_y;
    } else {
    
        while !place_meeting(target_x,target_y+sign(vect_y),obj_wall) {
            target_y += sign(vect_y)
        }
    
    }
}
if (global.down_key) {
    //movement vector
    //x
    if(!place_meeting(target_x-vect_x,target_y,obj_wall)) {
        target_x -= vect_x;
    } else {
    
        while !place_meeting(target_x-sign(vect_x),target_y,obj_wall) {
            target_x -= sign(vect_x);
        }
    
    }
    //y
    if(!place_meeting(target_x,target_y-vect_y,obj_wall)) {
        target_y -= vect_y;
    } else {
    
        while !place_meeting(target_x,target_y-sign(vect_y),obj_wall) {
            target_y -= sign(vect_y);
        }
    
    }
}

//direction control
if (global.left_key) {
target_dir += 1.5;
}
if (global.right_key) {
target_dir -= 1.5;
}

//sound vol control
//get the vol
if(global.up_key &amp;&amp; global.down_key) {
    soundvol = scr_approach(soundvol,0,.05)
    //if no keys are pressed do not animate sprite
    spr = spr_dir;
    indx = 0;
} else if(global.up_key || global.down_key){
    soundvol = scr_approach(soundvol,1,.1)
} else {
    soundvol = scr_approach(soundvol,0,.05)
    //if no keys are pressed do not animate sprite
    spr = spr_dir;
    indx = 0;
}
//set the vol
if (audio_exists(sndcreate)) {
    audio_sound_gain(sndcreate,soundvol,0);
}
if (soundvol == 0) {
    audio_sound_set_track_position(sndcreate, 0);
}
//control sprites
if(global.up_key &amp;&amp; !global.down_key) {
spr = spr_up_w_fps;
spr_dir = spr_up_fps;
indx += .125
}
if(global.down_key &amp;&amp; !global.up_key) {
spr = spr_down_w_fps;
spr_dir = spr_down_fps;
indx += .125
}
}

} else {



//initate

num += 1;
num = clamp(num,0,45);
shifter = scr_sine_so(5,4,num);

color = scr_approach(color,128,4);
r = scr_approach(r,41,2);
b = scr_approach(b,25,1);
g = scr_approach(g,24,1);

//just in case quiet and stop the player
soundvol = scr_approach(soundvol,0,.05)
if (audio_exists(sndcreate)) {
    audio_sound_gain(sndcreate,0,0);
}
//if no keys are pressed do not animate sprite
spr = spr_dir;
indx = 0;

//control tool movement
if (!global.up_key &amp;&amp; !global.down_key) {
    if (global.left_key) {
        xtool -= 2.5;
    }
    if (global.right_key) {
        xtool += 2.5;
    }
}
if (!global.right_key &amp;&amp; !global.left_key) {
    if (global.up_key) {
        ytool -= 2.5;
    }
    if (global.down_key) {
        ytool += 2.5;
    }
}

xtool = clamp(xtool,2,320-20);
ytool = clamp(ytool,0,240-64);


}

obj_player_rpg.x = x;
obj_player_rpg.y = y;

global.pitch = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the projection
// get the view direction vector
vect_x = lengthdir_x(32,global.dir);
vect_y = lengthdir_y(32,global.dir);
locker_x = lengthdir_x(24,global.dir-180+22.5);
locker_y = lengthdir_y(24,global.dir-180+22.5);
distortion_x = lengthdir_x(32,global.dir-90);
distortion_y = lengthdir_y(32,global.dir-90);
global.dir = target_dir;
x = target_x;
y = target_y;
depth = (-(distortion_x + distortion_y)/2);
shader_reset();
draw_set_colour_write_enable(true,true,true,false)
d3d_set_projection_ortho(320, 240, global.gamewidth, global.gameheight, 0);
draw_sprite_ext(spr_firstperson,0,320+160,240+120,1,1,0,make_color_hsv(0,0,color),1);
draw_sprite(spr,indx,320+158,240+192);
draw_sprite_ext(spr_firstperson,1,320+160,240+120,1,1,0,background_color,1);
image_index += .5;
//draw_sprite(spr_fps_tool,image_index,320+xtool+shifter,240+ytool)
draw_set_colour_write_enable(true,true,true,true)
d3d_set_projection_ext(x, y, z, x + dcos(global.dir), y-dsin(global.dir), z, 0, 0, 1, 40,640/480,1,352+96);
if (global.gfx = true) {
shader_set(shPSXLight_school);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
