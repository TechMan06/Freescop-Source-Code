<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///nifty
audio_pause_all();
//nifty surfaces
niftydisplay = noone;
niftydrawing = noone;
niftydisplaytrans = noone;
//pencil position
penx = 0;
peny = 239;
//texture position
lrpos = 0;
udpos = 0;
//texture data
if(room = rm_evc_1 || room = rm_evc_2 || room = rm_evc_3 || room = rm_evc_4 || room = rm_evc_5) {
niftytexture = spr_evencare_main;
} else if(room = rm_giftplane) {
niftytexture = spr_giftplane;
} else {
niftytexture = spr_under_nmp_general;
}
offsetx = sprite_get_xoffset(niftytexture);
offsety = sprite_get_yoffset(niftytexture);
sprframes = sprite_get_number(niftytexture);
sprwidth = sprite_get_width(niftytexture);
sprheight = sprite_get_height(niftytexture);
audio_play_sound(snd_vram_open,10,false);
vram_write = audio_play_sound(snd_vram_write,10,true);
audio_sound_gain(vram_write,0,0);

global.softlock = true;

pensprite = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shader_reset();
d3d_set_projection_ortho(0, 0, global.gamewidth, global.gameheight, 0);

//get texture data/////////////////////////////////////////////////////////////////////////////////////////////////////////
offsetx = sprite_get_xoffset(niftytexture);
offsety = sprite_get_yoffset(niftytexture);
sprframes = sprite_get_number(niftytexture);
sprwidth = sprite_get_width(niftytexture);
sprheight = sprite_get_height(niftytexture);

//Draw nifty edit///////////////////////////////////////////////////////////////////////////////////////////////////////////
if(surface_exists(niftydisplay)) {

    //resize surface if incorrect size
    if(surface_get_width(niftydisplay) != sprwidth*sprframes || surface_get_height(niftydisplay) != sprheight) {
        surface_resize(niftydisplay,sprwidth*sprframes,sprheight);
    }

    surface_set_target(niftydisplay);
    
    //draw the texture
        var i;
        for (i = 0; i &lt; sprframes; i += 1)
        {
            draw_sprite_stretched(niftytexture,i,sprwidth*i,0,sprwidth,sprheight);
        }

    //draw the nifty mark ups
    if(surface_exists(niftydrawing)) {
        draw_surface(niftydrawing,0,0);
    }
    //wipe the surface clean
    if(global.select_pressed) {
        draw_clear_alpha(c_white,0);
    }
    surface_reset_target();

} else {
    surface_set_target(niftydisplay); //Draw what is currently visible to our custom surface
    niftydisplay = surface_create(sprwidth*sprframes,sprheight);
    surface_reset_target();
}

//Niftydrawing/////////////////////////////////////////////////////////////////////////////////////////////////////////////
if(surface_exists(niftydrawing)) {

    //resize surface if incorrect size
    if(surface_get_width(niftydrawing) != sprwidth*sprframes || surface_get_height(niftydrawing) != sprheight) {
        surface_resize(niftydrawing,sprwidth*sprframes,sprheight);
    }    

    surface_set_target(niftydrawing);

    //preform drawing
    if(global.action_key) {
        draw_point_color(floor(penx)+lrpos, floor(peny)-udpos, make_color_rgb(252,191,246));
        audio_sound_gain(vram_write,1,0);
        pensprite = 0;
    } else {
        audio_sound_gain(vram_write,0,0);
        pensprite = 0;
    }
    //wipe the surface clean
    if(global.select_pressed) {
        draw_clear_alpha(c_white,0);
    }
    surface_reset_target();
    
} else {
    surface_set_target(niftydrawing); //Draw what is currently visible to our custom surface
    niftydrawing = surface_create(sprwidth*sprframes,sprheight);
    surface_reset_target();
}

//Niftycontrols////////////////////////////////////////////////////////////////////////////////////////////////////////////

//pencil control
if(global.left_key) {
    penx -= .5;
}
if(global.right_key) {
    penx += .5;
}
if(global.up_key) {
    peny -= .5;
}
if(global.down_key) {
    peny += .5;
}

//surface view controls
if(global.l1_pressed) {
    udpos -= 32;
}
if(global.l2_pressed &amp;&amp; udpos != 0) {
    udpos += 32;
}
if(floor(penx) = 320-65 &amp;&amp; lrpos != (sprwidth*sprframes)-256) {
    lrpos += 32;
    penx -= 32
}
if(floor(penx) = -1 &amp;&amp; lrpos != 0) {
    lrpos -= 32;
    penx += 32
}
//clamp pen positions
penx = clamp(penx,0,320-65);
peny = clamp(peny,0,239);

//clamp screen portions
lrpos = clamp(lrpos,0,(sprwidth*sprframes)-256);
udpos = clamp(udpos,-sprheight+240,0);

//move to next textuee
if(global.select_pressed) {
niftytexture++;
lrpos = 0;
udpos = 0;
//penx = 0;
//peny = 239;
}

//clamp texture values
if(niftytexture = mult) {
niftytexture = spr_green_dog_logo;
}

if(global.triangle_pressed || instance_exists(obj_fade)) {
surface_save(niftydisplay,"niftytemp.png");
sprite_replace(niftytexture,"niftytemp.png",sprframes,false,false,offsetx,offsety);
file_delete("niftytemp.png");
audio_play_sound(snd_vram_open,10,false);
audio_stop_sound(snd_vram_write);
global.softlock = false;
audio_resume_all();
instance_destroy();
}


//getniftydisplayforplayer
if(surface_exists(niftydisplaytrans)) {

    //resize surface if incorrect size
    if(surface_get_width(niftydisplaytrans) != sprwidth*sprframes || surface_get_height(niftydisplaytrans) != sprheight) {
        surface_resize(niftydisplaytrans,sprwidth*sprframes,sprheight);
    }

    surface_set_target(niftydisplaytrans);
    
    //draw the transparency
    var col = make_colour_rgb(255,0,255);
    draw_rectangle_colour(0,0,sprwidth*sprframes,sprheight,col,col,col,col,false);
        
    //wipe the surface clean
    if(global.select_pressed) {
        draw_clear_alpha(c_white,0);
    }
    surface_reset_target();

} else {
    surface_set_target(niftydisplaytrans); //Draw what is currently visible to our custom surface
    niftydisplaytrans = surface_create(sprwidth*sprframes,sprheight);
    surface_reset_target();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
