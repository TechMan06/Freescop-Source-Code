<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z = 0;
doorsteps = false;
indx = 0;
dir = 0;
rl_vel = 0;
fb_vel = 0;
vstop = 0;
hstop = 0;
diagstop = 0;
max_spd = 5 * delta_time / 1000000;
acc = 0;
movement = 0;
rot = spr_player_down;
xaxis = 0;
yaxis = 0;
decel = max_spd * (8/30);
vol = 0;
counter = 0;
step1 = noone;
step2 = noone;
last_room = room;
player_x = x;
player_y = y;
player_z = z;
fadedir = "down";
debug = false;
cam_x = 0;

//collisions 
collision_player=p3dc_begin_model();

p3dc_add_block(-15,-7.5,0,15,7.5,16);
p3dc_end_model();

collision_detect=p3dc_begin_model();

p3dc_add_block(-15,-7.5,-1024,15,7.5,1024);
p3dc_end_model();

//p3dc_ray(

//step = 0;

inc = 0;

mx =window_mouse_get_x(); 
my =window_mouse_get_y(); 
pscale = 1
oldz = 3;
zdark = 0;

sndpushing = audio_play_sound(snd_bucket_pushing,0,true);
audio_sound_gain(sndpushing,0,0);
sndpushingplay = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///make sure everything exists!

if(!instance_exists(obj_camera_manager)) {
if(room = rm_newmaker_plane) {
instance_create(x+cam_x,y-(91.7+59)+64,obj_camera_manager);
} else {
instance_create(x+cam_x,y-(91.7+59),obj_camera_manager);
}

}
if(!instance_exists(obj_audio_manager)) {
instance_create(x,y,obj_audio_manager);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///allow interaction
if (instance_exists(obj_interactable)) {
activate_interactable_object();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement

        /*if keyboard_check_pressed(ord("M")) {
            if room_exists(room_next(room)) room_goto_next(); 
        }
        if keyboard_check_pressed(ord("N")) {
            if room_exists(room_previous(room)) and room_previous(room) != rm_title then room_goto_previous(); 
        }*/
//make sure these objects do not exist before moving!
var pushing = false;

if(!instance_exists(obj_picture) &amp;&amp; !instance_exists(obj_tool_txt_box) &amp;&amp; global.paused = false &amp;&amp; global.fadeing = false &amp;&amp; global.p2toggle = false)  {
    //get the axis
    xaxis = (global.right_key - global.left_key)
    yaxis = (global.down_key - global.up_key)
    
    if (xaxis&amp;yaxis) || (xaxis) || (yaxis) {
        movement = 1;
    } else {
        movement = 0;
    }

    //get direction
    var dir = point_direction(0, 0, xaxis, yaxis)

    //get length
    if (xaxis == 0 &amp;&amp; yaxis == 0) {
        len = 0
        acc = scr_approach(acc,0,.08);
        counter = 0;
    } else {
        len = max_spd;
        acc = scr_approach(acc,max_spd/8,.07);
        counter += 1 * acc;
    }

    //get the hspd and vspd
    hspd = lengthdir_x(len, dir);
    vspd = lengthdir_y(len, dir);
    //get acceleration
    rl_vel += xaxis * acc;
    fb_vel += yaxis * acc;
    counter += 1 * acc;
    // if not stoped stop in a couple of frames
    if (xaxis = 0) {
        hstop -= 10;
    } else {
        hstop = 240;
    }

    if (yaxis = 0) {
        vstop -= 10;
    } else {
        vstop = 240;
    }

    if (hstop &lt; 0) {
        rl_vel = 0;
    }

    if (vstop &lt; 0) {
        fb_vel = 0;
    }
    
    if (xaxis = 0 &amp;&amp; yaxis = 0) {
        diagstop -= 10;
    } else {
        diagstop = 90;
    }
    
    if(diagstop &lt; 0) {
        fb_vel = 0;
        rl_vel = 0;
    }

    // limit
    fb_vel = clamp(fb_vel, -max_spd, max_spd);
    rl_vel = clamp(rl_vel, -max_spd, max_spd);
    
    if (xaxis != 0 &amp;&amp; yaxis != 0) {
        fb_vel = fb_vel*.86
        rl_vel = rl_vel*.86
    }

    // decelerate
    if (yaxis == 0 &amp;&amp; abs(fb_vel) &gt;= decel) {
        fb_vel -= sign(fb_vel) * decel;
    }
    if (xaxis == 0 &amp;&amp; abs(rl_vel) &gt;= decel) {
        rl_vel -= sign(rl_vel) * decel;
    }
    //move
    if(debug = false)  {
    
    scr_push();
    
    //collisions
    if (!p3dc_check(collision_player, x+rl_vel, y, z+16, global.collision_map, 0, 0, 0) &amp;&amp; !place_meeting(x+rl_vel,y,obj_wall)) {
        //x += rl_vel;
        x += lengthdir_x(rl_vel,global.dir);
    
    } else {
        //if there is a solid object in the way maybe we overshot it, so take baby steps.
        
        while (!p3dc_check(collision_player,x+sign(rl_vel), y, z+16, global.collision_map, 0, 0, 0) &amp;&amp; !place_meeting(x+sign(rl_vel),y,obj_wall)) {
            //x += sign(rl_vel)
            x += lengthdir_x(sign(rl_vel),global.dir);
        }
        //finally there is a solid object in front of us.
        rl_vel = 0;
    }
    
        
    if (!p3dc_check(collision_player, x, y+fb_vel, z+16, global.collision_map, 0, 0, 0) &amp;&amp; !place_meeting(x,y+fb_vel,obj_wall)) {
        y += lengthdir_y(fb_vel,global.dir-90);
    } else {
        //if there is a solit object in the way maybe we overshot it, so take baby steps.
        while (!p3dc_check(collision_player,x, y+sign(fb_vel), z+16, global.collision_map, 0, 0, 0) &amp;&amp; !place_meeting(x,y+sign(fb_vel),obj_wall)) {
            //y += sign(fb_vel)
            y += lengthdir_y(sign(fb_vel),global.dir-90);
        }
        //finally there is a solid object in front of us.
        fb_vel = 0;
    }
    
    
    } else {
        if keyboard_check_pressed(ord("L")) {
            if room_exists(room_next(room)) room_goto_next(); 
        }
        x += rl_vel;
        y += fb_vel;
        if keyboard_check_pressed(ord("K")) {
            if room_exists(room_previous(room)) and room_previous(room) != rm_title then room_goto_previous(); 
        }
    }

    
    
    if(p3dc_check(collision_detect, x, y, 0, global.collision_map, 0, 0, 0)) {
    
    if (global.zcollisions = true &amp;&amp; p3dc_check(collision_player, x, y, z+13, global.collision_map, 0, 0, 0)) {
        z += 16
    } else if(global.zcollisions = true) {
        while (p3dc_check(collision_player,x, y, z+sign(max_spd), global.collision_map, 0, 0, 0)) {
            z += sign(max_spd)
        }
    }
        
    if (global.zcollisions = true &amp;&amp; !p3dc_check(collision_player, x, y, z-13, global.collision_map, 0, 0, 0)) {
        z -= 16
    } else if(global.zcollisions = true) {
        while (!p3dc_check(collision_player,x, y, z-sign(max_spd), global.collision_map, 0, 0, 0)) {
            z -= sign(max_spd)
        }
    }
    
    if(z &lt; -512) {
    z += 1024;
    }
    } else {
    z = 0
    }
    image_speed = 0;
    image_index += abs(sign(len)) * (1/8);
        if (len == 0) {
        image_index = 1
        sprite_index = rot
    }
    if(abs(counter) &gt; 2.25) {
    // control the sprite
    //vertical sprites
    if (vspd &gt; 0) {
        sprite_index = spr_player_move_down;
        rot = spr_player_down
    } else if (vspd &lt; 0) {
        sprite_index = spr_player_move_up;
        rot = spr_player_up
    }
    
    //horizontal sprites
    if (hspd &gt; 0) {
        sprite_index = spr_player_move_left;
        rot = spr_player_left
    } else if (hspd &lt; 0) {
        sprite_index = spr_player_move_right;
        rot = spr_player_right
    }
    } else if(abs(counter) &gt; 2.15) {
    image_index = 0;
        // control the sprite
    //vertical sprites
    if (vspd &gt; 0) {
        sprite_index = spr_player_move_down;
        image_index = 0;
        rot = spr_player_down
    } else if (vspd &lt; 0) {
        sprite_index = spr_player_move_up;
        rot = spr_player_up
    }
    
    //horizontal sprites
    if (hspd &gt; 0) {
        sprite_index = spr_player_move_left;
        rot = spr_player_left
    } else if (hspd &lt; 0) {
        sprite_index = spr_player_move_right;
        rot = spr_player_right
    }
    
    
    } else {
        //vertical sprites
    if (vspd &gt; 0) {
        rot = spr_player_down
    } else if (vspd &lt; 0) {
        rot = spr_player_up
    }
    
    //horizontal sprites
    if (hspd &gt; 0) {
        rot = spr_player_left
    } else if (hspd &lt; 0) {
        rot = spr_player_right
    }
    }
} else if(instance_exists(obj_dialogue) || global.p2toggle || instance_exists(obj_picture) || instance_exists(obj_tool_txt_box)) {
image_speed = 0;
image_index = 1;
sprite_index = rot;
vspd = 0;
hspd = 0;

    //if not stopped stop in a couple of frames
    if (rl_vel != 0) {
        hstop -= 10;
    } else {
        hstop = 240;
    }
    
    if (rl_vel != 0 &amp;&amp; fb_vel != 0) {
        diagstop -= 10;
    } else {
        diagstop = 90;
    }

    if (fb_vel != 0) {
        vstop -= 10;
    } else {
        vstop = 240;
    }

    if (hstop &lt; 0) {
        rl_vel = 0;
    }

    if (vstop &lt; 0) {
        fb_vel = 0;
    }
    
    if(diagstop &lt; 0) {
        fb_vel = 0;
        rl_vel = 0;
    }
    
    
    // decelerate
    if (abs(fb_vel) &gt;= decel) {
        fb_vel -= sign(fb_vel) * decel;
    }
    if (abs(rl_vel) &gt;= decel) {
        rl_vel -= sign(rl_vel) * decel;
    }
    //move
    //collisions
    if (!p3dc_check(collision_player, x+rl_vel, y, z+16, global.collision_map, 0, 0, 0) &amp;&amp; !place_meeting(x+rl_vel,y,obj_wall)) {
        x += rl_vel;
    
    } else {
        //if there is a solid object in the way maybe we overshot it, so take baby steps.
        while (!p3dc_check(collision_player,x+sign(rl_vel), y, z+16, global.collision_map, 0, 0, 0) &amp;&amp; !place_meeting(x+sign(rl_vel),y,obj_wall)) {
            x += sign(rl_vel)
        }
        //finally there is a solid object in front of us.
        rl_vel = 0;
    }
    
        
    if (!p3dc_check(collision_player, x, y+fb_vel, z+16, global.collision_map, 0, 0, 0) &amp;&amp; !place_meeting(x,y+fb_vel,obj_wall)) {
        y += fb_vel;
    } else {
        //if there is a solit object in the way maybe we overshot it, so take baby steps.
        while (!p3dc_check(collision_player,x, y+sign(fb_vel), z+16, global.collision_map, 0, 0, 0) &amp;&amp; !place_meeting(x,y+sign(fb_vel),obj_wall)) {
            y += sign(fb_vel)
        }
        //finally there is a solid object in front of us.
        fb_vel = 0;
    }

} else if(global.paused = true) {
image_speed = 0;

} else if(global.fadeing = true) {
//take away controls
if(instance_exists(obj_door_approach) &amp;&amp; obj_fade.count &lt; obj_fade.transition_time/2 &amp;&amp; obj_fade.alpha &lt; 1) {

if(p3dc_check(collision_detect, x, y, 0, global.collision_map, 0, 0, 0)) {
    if (global.zcollisions = true &amp;&amp; p3dc_check(collision_player, x, y, z+13, global.collision_map, 0, 0, 0)) {
        z += 16
    } else if(global.zcollisions = true) {
        while (p3dc_check(collision_player,x, y, z+sign(max_spd), global.collision_map, 0, 0, 0)) {
            z += sign(max_spd)
        }
    }
        
    if (global.zcollisions = true &amp;&amp; !p3dc_check(collision_player, x, y, z-13, global.collision_map, 0, 0, 0)) {
        z -= 16
    } else if(global.zcollisions = true) {
        while (!p3dc_check(collision_player,x, y, z-sign(max_spd), global.collision_map, 0, 0, 0)) {
            z -= sign(max_spd)
        }
    }
    if(z &lt; -512) {
    z += 1024;
    }
    } else {
    z = 0
    }

door = instance_nearest(x,y,obj_door_approach)

//if(!place_meeting(x,y,instance_nearest(x,y,obj_door_approach))) {
image_index += (1/8);
image_speed = 0;

obj_player_rpg.vspd = 1;

obj_player_rpg.hspd = 1;


x = scr_approach(x,door.x,max_spd);
y = scr_approach(y,door.y,max_spd);

sprite_index = door.dir

} else if(obj_fade.count &gt; obj_fade.transition_time-obj_fade.fadeout){
global.fadeing = false;
rl_vel = 0;
fb_vel = 0;
if(doorsteps = false) {
image_speed = 0;
image_index = 0;
sprite_index = rot;
} else {
obj_player_rpg.vspd = 1;
image_index += (1/8);
obj_player_rpg.hspd = 1;
}
} else {
rl_vel = 0;
fb_vel = 0;
if(doorsteps = false) {
image_speed = 0;
image_index = 0;
sprite_index = rot;
} else {
obj_player_rpg.vspd = 1;
image_index += (1/8);
obj_player_rpg.hspd = 1;
}
}

}


//stop anything from happening in these rooms!
if (room = rm_bootup || room = rm_title) {
y = clamp(y,-128,-128);
x = clamp(x,0,0);
rl_vel = 0;
fb_vel = 0;
image_speed = 0;
image_index = 0;
sprite_index = spr_player_down;
}

if(z != oldz) {
max_spd = 5/3
oldz = z
} else {
max_spd = 5/2
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///do door things
player_x = other.target_x;
player_y = other.target_y;
player_z = other.target_z;
if(!instance_exists(obj_fade)) {
var transition = instance_create(x,y,obj_fade);
transition.fade_color = other.fade_color;
transition.target_room = other.target_room;
transition.transition_time = other.transition_time;
transition.fade_spr = other.fade_spr;
transition.fadein = other.fadein
transition.fadeout = other.fadeout
fadedir = other.dir;
rot = other.exitdir;
doorsteps = other.doorsteps;
}


cam_x = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set new x and y
x = player_x;
y = player_y;
z = player_z;
if(instance_exists(obj_player_fps)) {
obj_player_fps.x = player_x;
obj_player_fps.y = player_y;
}

if(room = rm_unmp_flower_shed) {
zdarkenabled = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the player
if(room != rm_bootup &amp;&amp; room != rm_title &amp;&amp;!instance_exists(obj_player_fps)) {
draw_set_colour(c_white);

d3d_transform_add_rotation_x(-global.pitch);
d3d_transform_add_rotation_z(global.dir)
//pscale = scr_sine(1,32);
d3d_transform_add_translation(x,y,z+(32*pscale));
if(room != rm_giftplane) {
if(global.light = true) {
shader_set(shd_flash);
var zalph = shader_get_uniform(shd_flash, "_alpha");
var isz = shader_get_uniform(shd_flash, "_zpos");

if(z &lt; 0 &amp;&amp; p3dc_check(collision_detect, x, y, 0, global.collision_map, 0, 0, 0) &amp;&amp; room = rm_unmp_flower_shed) {
zdark = (abs(clamp(z,-255,0)/32))
}
if(zdark = 0.03) {
zdark = 0;
}

if(room = rm_unmp_flower_shed) {
shader_set_uniform_f(zalph,global.inner_brightness-zdark);
shader_set_uniform_f(isz,z);
} else if(room = rm_unmp_flower_shed_b1) {
shader_set_uniform_f(zalph,global.inner_brightness-((abs(clamp(z,-255,0)/12)+zdark)+(point_distance_3d(x, y, z, global.clx, global.cly, global.clz)/(global.rad+64))));
shader_set_uniform_f(isz,0);
} else {
shader_set_uniform_f(zalph,global.inner_brightness-((abs(clamp(z,-255,0)/12)+zdark)+(point_distance_3d(x, y, z, global.clx, global.cly, global.clz)/(global.rad+64))));
}

}
}
d3d_draw_wall(-32*pscale,0,32*pscale,32*pscale,0,-32*pscale,sprite_get_texture(sprite_index,image_index),1,1);
d3d_transform_set_identity();

if(global.light = true) {
shader_set(shPSXLight);
var shpos = shader_get_uniform(shPSXLight,"pos");
var shradius = shader_get_uniform(shPSXLight,"radius");
var shcolour = shader_get_uniform(shPSXLight,"colour");
var shcolour_alt = shader_get_uniform(shPSXLight,"colour_alt");

shader_set_uniform_f(shpos,global.clx,global.cly,global.clz);
shader_set_uniform_f(shradius,global.rad); //Radius of the lighting
shader_set_uniform_f(shcolour,global.inner_brightness,global.inner_brightness,global.inner_brightness);
shader_set_uniform_f(shcolour_alt,colour_get_red(background_color)/255,colour_get_green(background_color)/255,colour_get_blue(background_color)/255); //This copies the background color
} else {
//shader_set(psx);
}


}
//draw_line_width_colour(x,y,obj_camera_manager.x,obj_camera_manager.y,4,c_purple,c_fuchsia);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
