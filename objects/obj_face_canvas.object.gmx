<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    // Cursor
choice_cursor = 0;
choice_inv = 4;
// Puzzle ( Not sure if i could even call this a puzzle, but its more of a guessing game)
puzzle_brain = -1;

//0 = Left Eyes
//1 = Right Eyes
//2 = Left Eyebrows
//3 = Right Eyebrows
//4 = Noses
//5 = Left Eye Higher (applies to the Eyebrow too)
//6 = Right Eye Higher (applies to the Eyebrow too)
//7 = Both Eyes Seperate
//8 = Left Eyebrow Higher
//9 = Right Eyebrow Higher
//10 = Nose Lower

// The Face

face_left_eye_0 = 0; // Type
face_left_eye_1 = 0; // X Offset
face_left_eye_2 = 0; // Y Offset

face_right_eye_0 = 0;// Type
face_right_eye_1 = 0; // X Offset
face_right_eye_2 = 0; // Y Offset

face_left_eyebrow_0 = 0; // Type
face_left_eyebrow_1 = 0; // X Offset
face_left_eyebrow_2 = 0; // Y Offset

face_right_eyebrow_0 = 0; // Type
face_right_eyebrow_1 = 0; // X Offset
face_right_eyebrow_2 = 0; // Y Offset

face_nose_0 = 0; // Type
face_nose_1 = 0; // Y Offset

face_left_eye = array_create(3);
face_right_eye = array_create(3);
face_left_eyebrow = array_create(3);
face_right_eyebrow = array_create(3);
face_nose = array_create(3);

face_left_eye[0] = 0; // Type
face_left_eye[1] = 0; // X Offset
face_left_eye[2] = 0; // Y Offset

face_right_eye[0] = 0; // Type
face_right_eye[1] = 0; // X Offset
face_right_eye[2] = 0; // Y Offset

face_left_eyebrow[0] = 0; // Type
face_left_eyebrow[1] = 0; // X Offset
face_left_eyebrow[2] = 0; // Y Offset

face_right_eyebrow[0] = 0; // Type
face_right_eyebrow[1] = 0; // X Offset
face_right_eyebrow[2] = 0; // Y Offset

face_nose[0] = 0; // Type
face_nose[2] = 0; // Y Offset

eye_size = font_add_sprite(sprFaceEyes,ord("0"),true,0);
brow_size = font_add_sprite(sprFaceBrows,ord("0"),true,0);
nose_size = font_add_sprite(sprFaceNose,ord("0"),true,0);
global.softlock = true;
//canvas = surface_create(49,32);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (puzzle_brain==12) {
    if (obj_face.computed){
        global.softlock = false;
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shader_reset();
d3d_set_projection_ortho(0, 0, global.gamewidth, global.gameheight, 0);
draw_sprite(spr_face_canvas,0,0,0);
draw_set_font(fnt_petscop); {
// Draws the Puzzle
    for(var choice = 0; choice &lt; choice_inv; choice++;){
        var col;
        if(choice_cursor == choice){col = c_red;}else{col = c_black;}
        
        // This is where it shows the Faces and what not
        if(puzzle_brain == 0){
            draw_sprite_ext(sprFaceEyesBack,choice,112+(choice*16),48+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,choice,112+(choice*16),48+(choice*32),1,1,0,col,1);
            choice_inv = 4;
        }
        if(puzzle_brain == 1){
            draw_sprite_ext(sprFaceEyesBack,face_left_eye[0],112+(choice*16),48+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_left_eye[0],112+(choice*16),48+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceEyesBack,choice,17+112+(choice*16),48+(choice*32),1,1,0,-1,1);
            draw_set_font(eye_size);
            draw_sprite_ext(sprFaceEyes,choice,/*string_width(string(choice))*/17+112+(choice*16),48+(choice*32),1,1,0,col,1);
            choice_inv = 4;
        }
        if(puzzle_brain == 2){
            draw_sprite_ext(sprFaceEyesBack,face_left_eye[0],112+(choice*16),48+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_left_eye[0],112+(choice*16),48+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceEyesBack,face_right_eye[0],17+112+(choice*16),48+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_right_eye[0],17+112+(choice*16),48+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceBrows,choice,112+(choice*16),48+(choice*32),1,1,0,col,1);
            choice_inv = 5;
        }
        if(puzzle_brain == 3){
            draw_sprite_ext(sprFaceEyesBack,face_left_eye[0],112+(choice*16),48+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_left_eye[0],112+(choice*16),48+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceEyesBack,face_right_eye[0],17+112+(choice*16),48+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_right_eye[0],17+112+(choice*16),48+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceBrows,face_left_eyebrow[0],112+(choice*16),48+(choice*32),1,1,0,col,1);
            draw_sprite_ext(sprFaceBrows,choice,17+112+(choice*16),48+(choice*32),1,1,0,col,1);
            choice_inv = 5;
        }
        if(puzzle_brain == 4){
            draw_sprite_ext(sprFaceEyesBack,face_left_eye[0],112+(choice*16),48+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_left_eye[0],112+(choice*16),48+(choice*32),1,1,0,col,1);
            draw_sprite_ext(sprFaceEyesBack,face_right_eye[0],17+112+(choice*16),48+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_right_eye[0],17+112+(choice*16),48+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceBrows,face_left_eyebrow[0],112+(choice*16),48+(choice*32),1,1,0,col,1);
            draw_sprite_ext(sprFaceBrows,face_right_eyebrow[0],17+112+(choice*16),48+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceNose,choice,112+(choice*16),48+(choice*32),1,1,0,col,1);
            choice_inv = 5;
        }
        if(puzzle_brain == 5){
            draw_sprite_ext(sprFaceEyesBack,face_left_eye[0],112+(choice*16),(-1 * (choice)) + 48+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_left_eye[0],112+(choice*16),(-1 * (choice)) + 48+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceEyesBack,face_right_eye[0],17+112+(choice*16),48+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_right_eye[0],17+112+(choice*16),48+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceBrows,face_left_eyebrow[0],112+(choice*16),(-1 * (choice)) + 48+(choice*32),1,1,0,col,1);
            draw_sprite_ext(sprFaceBrows,face_right_eyebrow[0],17+112+(choice*16),48+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceNose,face_nose[0],112+(choice*16),48+(choice*32),1,1,0,col,1);
            choice_inv = 2;
        }
        if(puzzle_brain == 6){
            draw_sprite_ext(sprFaceEyesBack,face_left_eye[0],112+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_left_eye[0],112+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceEyesBack,face_right_eye[0],17+112+(choice*16),(-1 * (choice)) + 48+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_right_eye[0],17+112+(choice*16),(-1 * (choice)) + 48+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceBrows,face_left_eyebrow[0],112+(choice*16),48+face_left_eyebrow[2]+(choice*32),1,1,0,col,1);
            draw_sprite_ext(sprFaceBrows,face_right_eyebrow[0],17+112+(choice*16),(-1 * (choice)) + 48+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceNose,face_nose[0],112+(choice*16),48+(choice*32),1,1,0,col,1);
            choice_inv = 2;
        }
        if(puzzle_brain == 7){
            draw_sprite_ext(sprFaceEyesBack,face_left_eye[0],(-2 * (choice)) + 112+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_left_eye[0],(-2 * (choice)) + 112+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceEyesBack,face_right_eye[0],(2 * (choice)) + 17+112+(choice*16),48+face_right_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_right_eye[0],(2 * (choice)) + 17+112+(choice*16),48+face_right_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceBrows,face_left_eyebrow[0],(-2 * (choice)) +112+(choice*16),48+face_left_eyebrow[2]+(choice*32),1,1,0,col,1);
            draw_sprite_ext(sprFaceBrows,face_right_eyebrow[0],(2 * (choice)) +17+112+(choice*16),48+face_right_eyebrow[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceNose,face_nose[0],112+(choice*16),48+(choice*32),1,1,0,col,1);
            choice_inv = 3;
        }
        if(puzzle_brain == 8){
            draw_sprite_ext(sprFaceEyesBack,face_left_eye[0],face_left_eye[1] + 112+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_left_eye[0],face_left_eye[1] + 112+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceEyesBack,face_right_eye[0],face_right_eye[1] + 17+112+(choice*16),48+face_right_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_right_eye[0],face_right_eye[1] + 17+112+(choice*16),48+face_right_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceBrows,face_left_eyebrow[0],face_left_eyebrow[1] +112+(choice*16),(-2 * (choice)) + 48+face_left_eyebrow[2]+(choice*32),1,1,0,col,1);
            draw_sprite_ext(sprFaceBrows,face_right_eyebrow[0],face_right_eyebrow[1] +17+112+(choice*16),48+face_right_eyebrow[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceNose,face_nose[0],112+(choice*16),48+(choice*32),1,1,0,col,1);
            choice_inv = 2;
        }
        if(puzzle_brain == 9){
            draw_sprite_ext(sprFaceEyesBack,face_left_eye[0],face_left_eye[1] + 112+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_left_eye[0],face_left_eye[1] + 112+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceEyesBack,face_right_eye[0],face_right_eye[1] + 17+112+(choice*16),48+face_right_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_right_eye[0],face_right_eye[1] + 17+112+(choice*16),48+face_right_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceBrows,face_left_eyebrow[0],face_left_eyebrow[1] +112+(choice*16),48+face_left_eyebrow[2]+(choice*32),1,1,0,col,1);
            draw_sprite_ext(sprFaceBrows,face_right_eyebrow[0],face_right_eyebrow[1] +17+112+(choice*16),(-2 * (choice)) + 48+face_right_eyebrow[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceNose,face_nose[0],112+(choice*16),48+(choice*32),1,1,0,col,1);
            choice_inv = 2;
        }
        if(puzzle_brain == 10){
            draw_sprite_ext(sprFaceEyesBack,face_left_eye[0],face_left_eye[1] + 112+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_left_eye[0],face_left_eye[1] + 112+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceEyesBack,face_right_eye[0],face_right_eye[1] + 17+112+(choice*16),48+face_right_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_right_eye[0],face_right_eye[1] + 17+112+(choice*16),48+face_right_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceBrows,face_left_eyebrow[0],face_left_eyebrow[1] +112+(choice*16),48+face_left_eyebrow[2]+(choice*32),1,1,0,col,1);
            draw_sprite_ext(sprFaceBrows,face_right_eyebrow[0],face_right_eyebrow[1] +17+112+(choice*16),48+face_right_eyebrow[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceNose,face_nose[0],112+(choice*16),(2 * (choice)) + 48+(choice*32),1,1,0,col,1);
            choice_inv = 3;
        }
        if(puzzle_brain == 11){
            draw_sprite_ext(sprFaceEyesBack,face_left_eye[0],face_left_eye[1] + 112+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_left_eye[0],face_left_eye[1] + 112+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceEyesBack,face_right_eye[0],face_right_eye[1] + 17+112+(choice*16),48+face_right_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_right_eye[0],face_right_eye[1] + 17+112+(choice*16),48+face_right_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceBrows,face_left_eyebrow[0],face_left_eyebrow[1] +112+(choice*16),48+face_left_eyebrow[2]+(choice*32),1,1,0,col,1);
            draw_sprite_ext(sprFaceBrows,face_right_eyebrow[0],face_right_eyebrow[1] +17+112+(choice*16),48+face_right_eyebrow[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceNose,face_nose[0],112+(choice*16),face_nose[2]+48+(choice*32),1,1,0,col,1);
            choice_inv = 1;
            /*surface_set_target(canvas);
            draw_clear_alpha(c_white, 1);
            draw_sprite_ext(sprFaceEyesBack,face_left_eye[0],face_left_eye[1] + 3+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_left_eye[0],face_left_eye[1] + 3+(choice*16),48+face_left_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceEyesBack,face_right_eye[0],face_right_eye[1] + 17+3+(choice*16),48+face_right_eye[2]+(choice*32),1,1,0,-1,1);
            draw_sprite_ext(sprFaceEyes,face_right_eye[0],face_right_eye[1] + 17+3+(choice*16),48+face_right_eye[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceBrows,face_left_eyebrow[0],face_left_eyebrow[1] +3+(choice*16),48+face_left_eyebrow[2]+(choice*32),1,1,0,col,1);
            draw_sprite_ext(sprFaceBrows,face_right_eyebrow[0],face_right_eyebrow[1] +17+3+(choice*16),48+face_right_eyebrow[2]+(choice*32),1,1,0,col,1);
            
            draw_sprite_ext(sprFaceNose,face_nose[0],3+(choice*16),face_nose[2]+48+(choice*32),1,1,0,col,1);
            surface_reset_target();*/
            global.softlock = false;
            instance_destroy();
        }
}
    
// I should put this in Step, this is where you select the faces

    if(choice_cursor &lt; 0) {
        choice_cursor = choice_inv-1;
    }
    if(choice_cursor &gt; choice_inv-1) {
        choice_cursor = 0;
    }
    


    if(global.up_pressed){
        if(choice_cursor != -1){choice_cursor--;}
    }
    if(global.down_pressed){
        if(choice_cursor != choice_inv+1){choice_cursor++;}
    }
    
    if(global.triangle_pressed) &amp;&amp; (puzzle_brain=0) {
        global.softlock = false;
        instance_destroy();
    }
    
    if (global.triangle_pressed){
        choice_cursor = 0;
        puzzle_brain--;
    }
    
    if(global.action_pressed){
    
        switch(puzzle_brain){
            case 0:
            {
                face_left_eye[0] = choice_cursor;
                break;
            }
            case 1:
            {
                face_right_eye[0] = choice_cursor;
                break;
            }
            case 2:
            {
                face_left_eyebrow[0] = choice_cursor;
                break;
            }
            case 3:
            {
                face_right_eyebrow[0] = choice_cursor;
                break;
            }
            case 4:
            {
                face_nose[0] = choice_cursor;
                break;
            }
            case 5:
            {
                face_left_eye[2] = -1 * choice_cursor;
                face_left_eyebrow[2] = -1 * choice_cursor;
                break;
            }
            case 6:
            {
                face_right_eye[2] = -1 * choice_cursor;
                face_right_eyebrow[2] = -1 * choice_cursor;
                break;
            }
            case 7:
            {
                face_left_eye[1] = -2 * choice_cursor;
                face_left_eyebrow[1] = -2 * choice_cursor;
                face_right_eye[1] = 2 * choice_cursor;
                face_right_eyebrow[1] = 2 * choice_cursor;
                break;
            }
            case 8:
            {
                face_left_eyebrow[2] = -2 * choice_cursor;
                break;
            }
            case 9:
            {
                face_right_eyebrow[2] = -2 * choice_cursor;
                break;
            }
            case 10:
            {
                face_nose[2] = 2 * choice_cursor;
                break;
            }
        }

        choice_cursor = 0;
        puzzle_brain++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
