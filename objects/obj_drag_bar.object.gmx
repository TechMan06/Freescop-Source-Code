<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-111111111</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///vars
hover = 0;
mmy = -1;
fade = .7;
isdrag = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(window_mouse_get_y() &lt;= 80/global.zoom) {
mmy = scr_approach(mmy,15,2);
if(window_mouse_get_x() &gt;= (global.gamewidth*global.zoom)-16 || (mouse_check_button(mb_left))) {

window_set_cursor(cr_handpoint);
} else {
window_set_cursor(cr_default);
}
} else {
mmy = scr_approach(mmy,-3,2);
window_set_cursor(cr_default);
}

if(window_mouse_get_y() &lt;= 80/global.zoom &amp;&amp; window_mouse_get_x() &lt;= (global.gamewidth*global.zoom)-16) {

var lx = display_mouse_get_x();
var ly = display_mouse_get_y();
if(mouse_check_button(mb_left)) {
isdrag = true;
window_set_position(lx-(global.gamewidth/2)*global.zoom,ly-10)
} else {
isdrag = false;
}
}





shader_reset();
draw_set_color(c_white);
draw_set_alpha(fade);
draw_rectangle_colour(0,-3,global.gamewidth,mmy/global.zoom,c_ltgray,c_ltgray,c_gray,c_gray,false);

if(window_mouse_get_y() &lt;= 50/global.zoom &amp;&amp; window_mouse_get_x() &gt;= (global.gamewidth*global.zoom)-16) {
hover = 1;

draw_set_blend_mode(bm_normal);
if(mouse_check_button(mb_left) &amp;&amp; isdrag = false) {
game_end();
}
} else {
hover = 0;

draw_set_blend_mode(bm_subtract);
}



draw_sprite_ext(spr_exit,hover,global.gamewidth-(16/global.zoom),(mmy-14)/global.zoom,1/global.zoom,1/global.zoom,0,c_white,1)
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
