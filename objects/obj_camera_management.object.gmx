<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_camera_manager</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1215752191</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z = 0;
//reg
shpos = shader_get_uniform(shPSXLight,"pos");
shradius = shader_get_uniform(shPSXLight,"radius");
shcolour = shader_get_uniform(shPSXLight,"colour");
shcolour_alt = shader_get_uniform(shPSXLight,"colour_alt");
//school
shpos_s = shader_get_uniform(shPSXLight_school,"pos");
shradius_s = shader_get_uniform(shPSXLight_school,"radius");
shcolour_s = shader_get_uniform(shPSXLight_school,"colour");
shcolour_alt_s = shader_get_uniform(shPSXLight_school,"colour_alt");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///audio listener
audio_listener_position(-global.ccx, global.ccy, global.ccz);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop lighing gliches :D
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the world
d3d_set_culling(true)
draw_set_alpha_test(true);
//draw_enable_alphablend(true)
if(instance_exists(obj_player_fps) &amp;&amp; instance_exists(obj_player_rpg)) {
d3d_set_zwriteenable(false);
d3d_set_projection_ext(obj_player_fps.x, obj_player_fps.y, obj_player_fps.z, obj_player_fps.x + dcos(global.dir), obj_player_fps.y-dsin(global.dir), obj_player_fps.z, 0, 0, 1, 40,global.gamewidth/global.gameheight,1,352+96);
x = obj_player_fps.x;
y = obj_player_fps.y;
z = obj_player_fps.z;
if (global.gfx = true) {
shader_set(shPSXLight_school);
}
shader_set_uniform_f(shpos_s,obj_player_fps.x,obj_player_fps.y,obj_player_fps.z);
shader_set_uniform_f(shradius_s,global.rad); //Radius of the lighting
shader_set_uniform_f(shcolour_s,global.inner_brightness,global.inner_brightness,global.inner_brightness);
shader_set_uniform_f(shcolour_alt_s,colour_get_red(background_color)/255,colour_get_green(background_color)/255,colour_get_blue(background_color)/255); //This copies the background color
} else if(instance_exists(obj_player_rpg) &amp;&amp; !instance_exists(obj_player_fps)) {
if(instance_exists(obj_camera_manager)) {
if(global.cam_control == true) {
x = obj_camera_manager.x+(global.cx);
y = obj_camera_manager.y+(global.cy)
z = (global.cz);
//campos
global.ccx = obj_camera_manager.x+(global.cx);
global.ccy = obj_camera_manager.y+(global.cy)
global.ccz = (global.cz);
//lights
global.clx = obj_player_rpg.x
global.cly = obj_player_rpg.y
global.clz = obj_player_rpg.z
} else {
x = global.ccx
y = global.ccy
z = global.ccz
}
}
d3d_set_projection_ext(x, y, z, x + dcos(global.dir+90), y-dsin(global.dir+90), z-dsin(global.pitch), 0,0,1, global.fov,global.gamewidth/global.gameheight,1,2000);
if (global.gfx = true) {

if(global.light = true) {
shader_set(shPSXLight);
var shpos = shader_get_uniform(shPSXLight,"pos");
var shradius = shader_get_uniform(shPSXLight,"radius");
var shcolour = shader_get_uniform(shPSXLight,"colour");
var shcolour_alt = shader_get_uniform(shPSXLight,"colour_alt");
shader_set_uniform_f(shpos,global.clx,global.cly,global.clz);
shader_set_uniform_f(shradius,global.rad); //Radius of the lighting
shader_set_uniform_f(shcolour,global.inner_brightness,global.inner_brightness,global.inner_brightness);
shader_set_uniform_f(shcolour_alt,colour_get_red(background_color)/255,colour_get_green(background_color)/255,colour_get_blue(background_color)/255); //This copies the background color

} else {
//shader_set(psx);
}

}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
