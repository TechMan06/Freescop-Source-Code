<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>computed=false;
draw = false;
make = false;
time = 0;

face_left_eye_0 = 0
face_left_eye_1 = 0
face_left_eye_2 = 0

face_right_eye_0 = 0
face_right_eye_1 = 0
face_right_eye_2 = 0

face_left_eyebrow_0 = 0
face_left_eyebrow_1 = 0
face_left_eyebrow_2 = 0

face_right_eyebrow_0 = 0
face_right_eyebrow_1 = 0
face_right_eyebrow_2 = 0

face_nose_0 = 0; // Type
face_nose_1 = 0; // Y Offset

eye_size = font_add_sprite(sprFaceEyes,ord("0"),true,0);
brow_size = font_add_sprite(sprFaceBrows,ord("0"),true,0);
nose_size = font_add_sprite(sprFaceNose,ord("0"),true,0);

face = array_create(5);
face[0] = d3d_model_create();
face[1] = d3d_model_create();
face[2] = d3d_model_create();
face[3] = d3d_model_create();
face[4] = d3d_model_create();

z = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_face_canvas)) {
    if (obj_face_canvas.puzzle_brain==11) {
    
        d3d_model_clear(face[0])
        d3d_model_clear(face[1])
        d3d_model_clear(face[2])
        d3d_model_clear(face[3])
        d3d_model_clear(face[4])
        
        face_left_eye_0 = obj_face_canvas.face_left_eye[0]; // Type
        face_left_eye_1 = obj_face_canvas.face_left_eye[1]; // X Offset
        face_left_eye_2 = obj_face_canvas.face_left_eye[2]; // Y Offset
        
        face_right_eye_0 = obj_face_canvas.face_right_eye[0]; // Type
        face_right_eye_1 = obj_face_canvas.face_right_eye[1]; // X Offset
        face_right_eye_2 = obj_face_canvas.face_right_eye[2]; // Y Offset
        
        face_left_eyebrow_0 = obj_face_canvas.face_left_eyebrow[0]; // Type
        face_left_eyebrow_1 = obj_face_canvas.face_left_eyebrow[1]; // X Offset
        face_left_eyebrow_2 = obj_face_canvas.face_right_eyebrow[2]; // Y Offset
        
        face_right_eyebrow_0 = obj_face_canvas.face_right_eyebrow[0]; // Type
        face_right_eyebrow_1 = obj_face_canvas.face_right_eyebrow[1]; // X Offset
        face_right_eyebrow_2 = obj_face_canvas.face_right_eyebrow[2]; // Y Offset
        
        face_nose_0 = obj_face_canvas.face_nose[0]; // Type
        face_nose_1 = obj_face_canvas.face_nose[2]; // Y Offset
        
        draw = true;
        computed = true;
        make = false;
        
    }
}

if (face_left_eye_0 == 3) &amp;&amp; (face_right_eye_0 == 3) &amp;&amp; (draw==true) {
    if (!instance_exists(obj_dialogue)) &amp;&amp; (make=false) {
        instance_create(x,y,obj_dialogue);
        make=true;
    }
    if (instance_exists(obj_dialogue)) {
        obj_dialogue.boxcolor = c_black;
        obj_dialogue.text[0] = "Mike Test"
        obj_dialogue.text_display[0] = "[$=c_red]Mike[$=c_white] test."
    }
}

if (face_left_eye_0 == 0) &amp;&amp; (face_right_eye_0 == 0) &amp;&amp; (draw==true) {
    if (!instance_exists(obj_dialogue)) &amp;&amp; (make=false) {
        instance_create(x,y,obj_dialogue);
        make=true;
    }
    if (instance_exists(obj_dialogue)) {
        obj_dialogue.boxcolor = c_black;
        obj_dialogue.text[0] = "Another test!"
        obj_dialogue.text_display[0] = "[$=c_red]Another[$=c_white] test!."
    }
}

if (make=true) {
    if (!audio_is_playing(snd_child_library_room)) {
        audio_play_sound(snd_child_library_room,10,true);
    }
    if (time&lt;10000) {
        if (!global.paused) {
            global.ccz = global.ccz - (-2.5 + random(5));
            time++;
        }
    }
}

if (room==rm_unmp_child_library_room) {
    y = 160;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room==rm_unmp_child_library_room) {
    instance_destroy();
}
audio_stop_sound(snd_child_library_room);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*//d3d_transform_add_rotation_y(45)
d3d_model_wall(face[0], x,y-1,z, x-18, y-1,z+12,1,1);
d3d_model_wall(face[1], x,y,z, x-18, y,z+12,1,1);

d3d_model_wall(face[2], x,y-1,z, x-18,y-1,z+12,1,1);
d3d_model_wall(face[3], x,y,z, x-18,y,z+12,1,1);

//d3d_model_wall(face[4], x,y,z, x-17,y,z+17,1,1);
d3d_model_wall(face[4], x,y,z, x-18, y,z+12,1,1);
d3d_model_wall(face[5], x,y,z, x-17,y,z+17,1,1);

d3d_model_wall(face[6], x,y,z, x-25, y,z+25,1,1);


//d3d_model_draw(face[0], x-face_left_eye_1, y, z, sprite_get_texture(sprFaceEyesBack, face_left_eye_0));
d3d_model_draw(face[1], x-face_left_eye_1, y, z+face_left_eye_2, sprite_get_texture(sprFaceEyesBlack, face_left_eye_0+1));

//d3d_model_draw(face[2], x-face_right_eye_1, y, z, sprite_get_texture(sprFaceEyesBack, face_right_eye_0));
d3d_model_draw(face[3], x-face_right_eye_1-17, y, z+face_right_eye_2, sprite_get_texture(sprFaceEyesBlack, face_right_eye_0+1));

//d3d_model_draw(face[4], x-face_left_eyebrow_1, y, z+face_left_eyebrow_2, sprite_get_texture(sprFaceBrowsBlack, face_left_eyebrow_0));
//d3d_model_draw(face[5], x-face_right_eyebrow_1-17, y, z+face_right_eyebrow_2, sprite_get_texture(sprFaceBrowsBlack, face_right_eyebrow_0));
//d3d_transform_add_rotation_y(90)
d3d_model_draw(face[4], x, y, z, sprite_get_texture(sprFaceBrowsBlack, face_left_eyebrow_0));

d3d_model_draw(face[6], x,y, z+face_nose_1+48, sprite_get_texture(sprFaceNoseBlack, face_nose_0+1));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (draw=true) {
    if (room==rm_unmp_child_library_entrance) {
        d3d_transform_set_identity();
        d3d_transform_add_rotation_z(180);
        d3d_transform_set_identity();
        d3d_transform_add_rotation_x(-10)  
        d3d_transform_add_rotation_z(-29.2)
        d3d_transform_add_translation(74,-145,40);
    }
    
    d3d_model_wall(face[0], x,y,z, x-18, y,z+17,1,1);
    d3d_model_wall(face[1], x,y,z, x-18,y,z+17,1,1);
    
    d3d_model_wall(face[2], x,y,z, x-18, y,z+17,1,1);
    d3d_model_wall(face[3], x,y,z, x-18,y,z+17,1,1);
    
    d3d_model_wall(face[4], x,y,z, x-25, y,z+25,1,1);
    
    
    d3d_model_draw(face[0], (x-face_left_eye_1), y, z+face_left_eye_2, sprite_get_texture(sprFaceEyesBrows, face_right_eye_0));
    d3d_model_draw(face[1], (x-(face_right_eye_1))-17, y, z+face_right_eye_2, sprite_get_texture(sprFaceEyesBrows, face_left_eye_0));
    
    if (face_left_eyebrow_0!=0) {
        d3d_model_draw(face[2], x-face_left_eyebrow_1, y, z-(face_right_eyebrow_2*2), sprite_get_texture(sprFaceEyesBrows, face_right_eyebrow_0+4));
    }
    if (face_right_eyebrow_0!=0) {
        d3d_model_draw(face[3], x-face_right_eyebrow_1-17, y, z-(face_left_eyebrow_2*2), sprite_get_texture(sprFaceEyesBrows, face_left_eyebrow_0+4));
    }
    
    d3d_model_draw(face[4], x-8 ,y, z+face_nose_1-12, sprite_get_texture(sprFaceNoseBlack, face_nose_0));

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
