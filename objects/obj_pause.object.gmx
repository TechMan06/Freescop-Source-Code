<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//surface stuff
screen1 = noone;
final_surface = noone;
ntsc = 0;
scale = .5;
sizestart = .5;
paused = false;
spd = 0;
empty = "";
indx = 0;
cheat = "";
scroll = 260;

btnfnt = font_add_sprite(spr_talk_buttons,ord("0"),true,2);
global.fnt_money=font_add_sprite(spr_money_spritefont,ord("0"),true,4);
time = 0;
demotime = 0;

menu_button = 0;
lowhigh = 0;

optionsmenu = false;
petsmenu =  false;
bookmenu = false;

quitoptions = false;
dontquit = 0;
saveandquit = 0;
justquit = 0;
dontquitindx = 1;
saveandquitindx = 0;
justquitindx = 0;
quitindex = 0;

resume = 10;
options = 0;
pets = 0;
book = 0;
quit = 0;

resumeindx = 1;
optionsindx = 0;
petsindx = 0;
bookindx = 0;
quitindx = 0;

addnum = 10;
menuspd = 1;
bup = 0;

sprov = sprite_add("overlay.png", 1, false, false, 0, 0); 
tab = 0;

vsync = false;

oindex = 0;
optionbutton = 0;
opressed = false;
onext = 0;

optionkeyboard = 0;
optionxbox = 0;
optionps1 = 0;
optionps4 = 0;

ckeyboard = 0;
cxbox = 0;
cps1 = 0;
cps4 = 0;



dist = 20;
start = 120-40;

multiplier_map = shader_get_sampler_index(petscop_ntsc,"mult");
texture_set_stage(multiplier_map, sprite_get_texture(mult,0));

squigliness_map = shader_get_sampler_index(petscop_ntsc,"squig");
texture_set_stage(squigliness_map, sprite_get_texture(squig,0));

squigliness_map = shader_get_sampler_index(petscop_ntsc,"overlay");
texture_set_stage(squigliness_map, sprite_get_texture(overlay,0));

squigliness_invert = shader_get_uniform(petscop_ntsc, "squiginv");
squigliness_invert_value = 1;

swaptoggle = 0;
global.pausetext = "empty";
gstart = false;


uni_crt_sizes = shader_get_uniform(sh_CRT_Windows_distortion_and_border, "u_crt_sizes");
distort = shader_get_uniform(sh_CRT_Windows_distortion_and_border, "distort");
distortion = shader_get_uniform(sh_CRT_Windows_distortion_and_border, "distortion");
border = shader_get_uniform(sh_CRT_Windows_distortion_and_border, "border");

var_distort = false;
var_distortion_ammount = .5;
var_border = false;

shader_to_use = sh_CRT_Windows_distortion_and_border;

rpupdate = -10;

petm_x = 0;
petm_y = 0;
pet_selected = 0;
pet_current = 0;

fade_nb = 0;
fade_all = 0;
fade_state = 0;

xmod = 0;
ymod = 0;
stag = 0;

//selected

petgrid = ds_grid_create(2,5);

ds_grid_set(petgrid, 0, 0, 1);
ds_grid_set(petgrid, 0, 1, 0);
ds_grid_set(petgrid, 0, 2, 0);
ds_grid_set(petgrid, 0, 3, 0);
ds_grid_set(petgrid, 0, 4, 0);

ds_grid_set(petgrid, 1, 0, 0);
ds_grid_set(petgrid, 1, 1, 0);
ds_grid_set(petgrid, 1, 2, 0);
ds_grid_set(petgrid, 1, 3, 0);
ds_grid_set(petgrid, 1, 4, 0);

in = false;
inmove = false;
panim = 0;
celx = 0;
cely = 0;

pausestr = "";
pausestrcount = 0;
pausepage = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change things!
/*if(keyboard_check_pressed(vk_shift)) {
tab++;
}
if(tab &gt; 2) {
tab = 0;
}

if(keyboard_check(ord('E'))) {
global.pitch += .5;
}

if(keyboard_check(ord('R'))) {
global.pitch -= .5;
}

if(keyboard_check(ord('C'))) {
global.dir += .5;
}

if(keyboard_check(ord('V'))) {
global.dir -= .5;
}

if(tab = 0) {
if(keyboard_check(ord('W'))) {
global.cy += .5;
}

if(keyboard_check(ord('S'))) {
global.cy -= .5;
}

if(keyboard_check(ord('A'))) {
global.cx += .5;
}

if(keyboard_check(ord('D'))) {
global.cx -= .5;
}

if(keyboard_check(ord('Z'))) {
global.cz += .5;
}

if(keyboard_check(ord('X'))) {
global.cz -= .5;
}
}

if(tab = 1) {
if(keyboard_check(ord('W'))) {
global.ccy += .5;
}

if(keyboard_check(ord('S'))) {
global.ccy -= .5;
}

if(keyboard_check(ord('A'))) {
global.ccx += .5;
}

if(keyboard_check(ord('D'))) {
global.ccx -= .5;
}

if(keyboard_check(ord('Z'))) {
global.ccz += .5;
}

if(keyboard_check(ord('X'))) {
global.ccz -= .5;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_pause</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//make sure no gui objects exist

    //make sure paused is correct based on scaling!
    if(scale &lt; .5 || global.softlock) {
    global.paused = true;
    } else {
    global.paused = false;
    }
x = obj_player_rpg.x
y = obj_player_rpg.y

if (bookmenu) {
    scroll-=0.26;
}
if(!instance_exists(obj_dialogue) &amp;&amp; !instance_exists(obj_picture) &amp;&amp; !instance_exists(obj_tool_txt_box) &amp;&amp; room != rm_bootup &amp;&amp; room != rm_title &amp;&amp; global.softlock = false) {
    indx += .2
    
    //get the paused status
    if(global.start_pressed &amp;&amp; paused = false &amp;&amp; scale &gt;= .5 &amp;&amp; !global.softlock &amp;&amp; !instance_exists(obj_fade) &amp;&amp; !global.p2toggle &amp;&amp; distance_to_object(obj_door) &gt; 16) {
        paused = true;
        spd = 0;
        audio_play_sound(snd_pause_open,1,false);
        cheat = "";
        sizestart = .5
    } else if(global.start_pressed &amp;&amp; paused = true &amp;&amp; scale &lt;= 0 &amp;&amp; optionsmenu = false &amp;&amp; petsmenu = false &amp;&amp; !instance_exists(obj_fade) &amp;&amp; distance_to_object(obj_door) &gt; 16) {
        paused = false;
        spd = 0;
        caught = true;
        sizestart = 0
        if(cheat = "vvvvv&gt;" &amp;&amp; room = rm_evc_4) {
        global.nmp = true;
        audio_stop_sound(mus_evc);
        audio_stop_sound(mus_evc_demo);
        audio_play_sound(snd_pause_secret_code,20,false);
        }
    }
    
    //set the window size
    if(paused = true) {
        if(spd &lt;= 60) {
        scale = scr_ease_in_out(spd, sizestart, -.5, 60);
        spd++;
        }
        
    } else {
        if(spd &lt;= 60) {
        scale = scr_ease_in_out(spd, sizestart, .5, 60);
        spd++;
        }
    }
    scale = clamp(scale,0,.5);
    
    //menu global.action_presseds
    if(global.paused = true &amp;&amp; scale = 0) {
    
    if(quitoptions = false &amp;&amp; optionsmenu = false &amp;&amp; petsmenu = false) {
    
    //menu controls
    if(global.right_pressed) {
    cheat+="&gt;";
    }
    if(global.down_pressed) {
    cheat+="v";
    if(menu_button != 4) {
    menu_button += 1;
    lowhigh = 1 - lowhigh;
    if(lowhigh = 0) {
    audio_play_sound(snd_pause_move1,1,false);
    } else {
    audio_play_sound(snd_pause_move2,1,false);
    }
    }
    //audio_play_sound(snd_pause_menu1,2,false);
    //cheat += "v"
    }
    
    if(global.up_pressed) {
    if(menu_button != 0) {
    menu_button -= 1;
    lowhigh = 1 - lowhigh;
    if(lowhigh = 0) {
    audio_play_sound(snd_pause_move1,1,false);
    } else {
    audio_play_sound(snd_pause_move2,1,false);
    }
    }
    //audio_play_sound(snd_pause_menu2,2,false);
    //cheat += "^"
    }
    
    menu_button = clamp(menu_button,0,4);
    
    //resume
    if(menu_button = 0) {
        if(global.action_pressed &amp;&amp; paused = true &amp;&amp; scale &lt;= 0) {
            paused = false;
            spd = 0;
            sizestart = 0
        }
        resumeindx = 1;
        resume = scr_approach(resume,addnum,menuspd);
    } else {
        resume = scr_approach(resume,0,menuspd);
        resumeindx = 0;
    }
    //options
    if(menu_button = 1) {
        if(global.action_pressed) {
            audio_play_sound(snd_pause_error,2,false);
            //optionsmenu = true;
        }
        options = scr_approach(options,addnum,menuspd);
        optionsindx = 1;
    } else {
        options = scr_approach(options,0,menuspd);
        optionsindx = 0;
    }
    //pets
    if(menu_button = 2) {
        if(global.action_pressed) {
            audio_play_sound(snd_pause_pets_open,2,false);
            petsmenu = true;
        }
        pets = scr_approach(pets,addnum,menuspd);
        petsindx = 1;
    } else {
        pets = scr_approach(pets,0,menuspd);
        petsindx = 0;
    }
    //book
    if(menu_button = 3) {
    if(global.action_pressed) {
            audio_play_sound(snd_pause_pets_open,2,false);
            bookmenu = true;
        }
        book = scr_approach(book,addnum,menuspd);
        bookindx = 1;
    } else {
        book = scr_approach(book,0,menuspd);
        bookindx = 0;
    }
    //quit
    if(menu_button = 4) {
        if(global.action_pressed) {
            quit = 0;
            audio_play_sound(snd_pause_quit,10,false);
            quitoptions = true;
        }
        quit = scr_approach(quit,addnum,menuspd);
        quitindx = 1;
    } else {
        quit = scr_approach(quit,0,menuspd);
        quitindx = 0;
    }
    } else if(quitoptions = true) {
    
    //menu controls
    if(global.down_pressed) {
    
    if(quitindex != 2) {
    quitindex += 1;
    lowhigh = 1 - lowhigh;

    if(lowhigh = 0) {
    audio_play_sound(snd_pause_move1,1,false);
    } else {
    audio_play_sound(snd_pause_move2,1,false);
    }
    }
    //audio_play_sound(snd_pause_menu1,2,false);
    //cheat += "v"
    }
    
    if(global.up_pressed) {
    
    if(quitindex != 0) {
    quitindex -= 1;
    lowhigh = 1 - lowhigh;

    if(lowhigh = 0) {
    audio_play_sound(snd_pause_move1,1,false);
    } else {
    audio_play_sound(snd_pause_move2,1,false);
    }
    }

    //audio_play_sound(snd_pause_menu2,2,false);
    //cheat += "^"
    }
    
    quitindex = clamp(quitindex,0,2);
    
    //don't quit
    if(quitindex = 0) {
        if(global.action_pressed) {
            dontquit = 0;
            audio_play_sound(snd_pause_close,1,false);
            quitoptions = false;
        }
        dontquit = scr_approach(dontquit,addnum,menuspd);
        dontquitindx = 1;
    } else {
        dontquit = scr_approach(dontquit,0,menuspd);
        dontquitindx = 0;
    }
    //save and quit
    if(quitindex = 1) {
        if(global.action_pressed &amp;&amp; !global.replaying) {
        
            with(obj_manager) {
                ds_map_replace(obj_manager.save_data,"pieces",global.pieces)
                ds_map_replace(obj_manager.save_data,"room",room_get_name(room))
                ds_map_replace(obj_manager.save_data,"prot",sprite_get_name(obj_player_rpg.rot))
                ds_map_replace(obj_manager.save_data,"newfile",0)
                ds_map_replace(obj_manager.save_data,"panicsv",global.nmp)
                ds_map_replace(obj_manager.save_data,"x",obj_player_rpg.x)
                ds_map_replace(obj_manager.save_data,"y",obj_player_rpg.y)
                ds_map_replace(obj_manager.save_data,"z",obj_player_rpg.z)
                ds_map_replace(obj_manager.save_data,"trapdoor",global.secretdoor)
                ds_map_secure_save(save_data,ds_map_find_value(obj_manager.save_data,"saveto"));
            }
        
            game_restart();
        }
        saveandquit = scr_approach(saveandquit,addnum,menuspd);
        saveandquitindx = 1;
    } else {
        saveandquit = scr_approach(saveandquit,0,menuspd);
        saveandquitindx = 0;
    }
    //just quit
    if(quitindex = 2) {
        if(global.action_pressed &amp;&amp; !global.replaying) {
            game_end();
        }
        justquit = scr_approach(justquit,addnum,menuspd);
        justquitindx = 1;
    } else {
        justquit = scr_approach(justquit,0,menuspd);
        justquitindx = 0;
    }
    } else if(optionsmenu = true) {
    
        if(global.triangle_pressed) {
            optionsmenu = false;
        }
    
        if(global.up_pressed) {
            oindex--;
            onext += 80;
        }
        if(global.down_pressed) {
            oindex++;
            onext -= 80;
        }
        oindex = clamp(oindex,0,3);

        
        optionbutton = lerp(optionbutton,onext,.2);
        
        if(oindex = 0) {
            optionkeyboard = lerp(optionkeyboard,dist,.2);
            ckeyboard = c_white;

        } else {
            optionkeyboard = lerp(optionkeyboard,0,.2);
            ckeyboard = c_ltgray;

        }
        if(oindex = 1) {
            optionxbox = lerp(optionxbox,dist,.2);
            cxbox = c_white;

        } else {
            optionxbox = lerp(optionxbox,0,.2);
            cxbox = c_ltgray;

        }
        if(oindex = 2) {
            optionps1 = lerp(optionps1,dist,.2);
            cps1 = c_white;

        } else {
            optionps1 = lerp(optionps1,0,.2);
            cps1 = c_ltgray;

        }
        if(oindex = 3) {
            optionps4 = lerp(optionps4,dist,.2);
            cps4 = c_white;

        } else {
            optionps4 = lerp(optionps4,0,.2);
            cps4 = c_ltgray;

        }
                onext = clamp(onext,-240,0);
                optionbutton = clamp(optionbutton,-240,0);
    } else if(petsmenu = true) {
        
        //wiggle
        if(stag = 0) {
        xmod += 2/8
        xmod = clamp(xmod,0,2);
        if(xmod &gt;= 2) {
        stag = 1;
        }
        }
        if(stag = 1) {
        ymod += 2/8
        ymod = clamp(ymod,0,2);
        if(ymod &gt;= 2) {
        stag = 2;
        }
        }
        if(stag = 2) {
        xmod -= 2/8
        xmod = clamp(xmod,0,2);
        if(xmod &lt;= 0) {
        stag = 3;
        }
        }
        if(stag = 3) {
        ymod -= 2/8
        ymod = clamp(ymod,0,2);  
        if(ymod &lt;= 0) {
        stag = 0;
        }
        }
        //fade in out
        if(fade_state = 0) {
        fade_nb = scr_approach(fade_nb,1,1/20);
            if(fade_nb = 1) {
            fade_state = 1;
            }
        } else if(fade_state = 1) {
        fade_all = scr_approach(fade_all,1,1/24);
            if(fade_all = 1) {
            fade_state = 2;
            }
        } else if(fade_state = 2) {
        fade_all = scr_approach(fade_all,0,1/28);
        fade_nb = 0;
        }
    
        if(fade_state = 3) {
        fade_all = scr_approach(fade_all,1,1/28);
            if(fade_all = 1) {
            fade_state = 4;
            }
        } else if(fade_state = 4) {
        fade_all = scr_approach(fade_all,0,1/28);
            if(fade_all = 0) {
            celx = 0;
            cely = 0;
            scr_get_pet_hover(celx,cely);
            fade_state = 0;
            petsmenu = false;
            }
        }
        //
        if(fade_state = 2 &amp;&amp; fade_all = 0) {
            
            if(in = false) {
            if(global.left_pressed) {
            celx--;
            }
            if(global.right_pressed) {
            celx++;
            }
            if(global.up_pressed) {
            cely--;
            }
            if(global.down_pressed) {
            cely++;
            }
            scr_get_pet_hover(celx,cely);
            
            if(global.triangle_pressed) {
            //go back
                fade_state = 3;
            }
            
            }
            
            if(in = true) {
            ds_grid_set(petgrid, celx, cely, 4);
            
            var i;
            for (i = 0; i &lt; 5; i += 1)
            {
                if(!(i = cely &amp;&amp; celx = 0)) {
                ds_grid_set(petgrid, 0, i, 2);
                }
                if(!(i = cely &amp;&amp; celx = 1)) {
                ds_grid_set(petgrid, 1, i, 3);
                }
            }
            
            if(inmove) {
            panim++;
            } else {
            panim--;
            if(panim = 0) {
            in = false;
            }
            }
            
            panim = clamp(panim,0,60);
            

            
            if(global.triangle_pressed &amp;&amp; panim = 60) {
            pausepage = 0;
            pausestrcount = 0;
            inmove = false;
            }
            
            }
            
            
            celx = clamp(celx,0,1);
            cely = clamp(cely,0,4);
                
        }
        
    }
    }
}   
var time = date_time_string(date_current_datetime());
if(global.square_pressed) {
if(surface_exists(final_surface)) {
surface_save(final_surface,"screenshots\ScreenshotP3D " + string(current_year) + "-" + string(current_month) + "-" + string(current_day) + " " + string(current_hour) + "-" + string(current_minute) + "-" + string(current_second) + ".png");
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(surface_exists(screen1)) {
    surface_free(screen1);
}

if(surface_exists(final_surface)) {
    surface_free(final_surface);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shader_reset();
d3d_set_projection_ortho(0, 0, global.gamewidth, global.gameheight, 0);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
if(room != rm_bootup &amp;&amp; room != rm_title) {

rpupdate++;
if(global.replaying) {
    if(rpupdate &lt;= 0) {
    discord_update_presence("Build: Beta 1.4","Watching a DEMO!","p3d","")
    }
    if(rpupdate = 600) {
    discord_update_presence("Build: Beta 1.4","Pieces: " + string(empty)+string(global.pieces),"p3d","")
    }
    if(rpupdate &gt; 1200) {
    discord_update_presence("Build: Beta 1.4","Level: " + string_copy(room_get_name(room),4,64),"p3d","")
    }
    if(rpupdate &gt; 1800) {
    rpupdate = -10;
    }
} else {
    if(rpupdate &lt;= 0) {
    discord_update_presence("Build: Beta 1.4","Playing Game!","p3d","")
    }
    if(rpupdate = 600) {
    discord_update_presence("Build: Beta 1.4","Pieces: " + string(empty)+string(global.pieces),"p3d","")
    }
    if(rpupdate &gt; 1200) {
    discord_update_presence("Build: Beta 1.4","Level: " + string_copy(room_get_name(room),4,64),"p3d","")
    }
    if(rpupdate &gt; 1800) {
    rpupdate = -10;
    }
}

} else if(room = rm_title) {
discord_update_presence("Build: Beta 1.4","Loading a save file!","p3d","")
rpupdate = -10;
} else if(room = rm_bootup) {
discord_update_presence("Build: Beta 1.4","Booting Game!","p3d","")
rpupdate = -10;
}

//draw_sprite_tiled_ext(spr_anti_black_bars,0,0,0,.5,.5,c_white,1);
//draw_sprite_ext(spr_fade_bg_fade,0,160,120,.7,200,0,c_white,1)
application_surface_draw_enable(false);
if(surface_exists(screen1)) {
    //draw items to the surface!
    surface_set_target(screen1); //Draw what is currently visible to our custom surface
    if(room != rm_title) {
    draw_sprite(spr_menu,0,0,0);
    draw_set_halign(fa_right)
    draw_set_color(c_white);
    draw_set_font(global.fnt_money);
    if (global.pieces &gt;= 0) empty = "0000"
    if (global.pieces &gt; 9) empty = "000"
    if (global.pieces &gt; 99) empty = "00"
    if (global.pieces &gt; 999) empty = "0"
    if (global.pieces &gt; 9999) empty = ""
    draw_text_transformed(300,21,string(empty)+string(global.pieces),1,1,0);
    draw_set_halign(fa_left)
    draw_sprite_ext(spr_menu_piece,indx,177,19,1,1,0,c_white,1)
    draw_set_font(fnt_petscop);
    draw_set_colour(make_colour_rgb(143,43,104))
    draw_text(180, 56, global.pausetext)
    draw_sprite(spr_pause_select,0,216,199);
    draw_sprite(spr_pause_resume,0,219,171);
    //draw menu buttons
    if(quitoptions = false &amp;&amp; optionsmenu = false &amp;&amp; petsmenu = false) {
    //resume
    draw_sprite_ext(spr_resume,resumeindx,(21+resume),137,1,1,0,c_white,1);
    //options
    draw_sprite_ext(spr_options,optionsindx,(21+options),154,1,1,0,c_white,1);
    //pets
    draw_sprite_ext(spr_pets,petsindx,(21+pets),171,1,1,0,c_white,1);
    //book
    draw_sprite_ext(spr_book,bookindx,(21+book),188,1,1,0,c_white,1);
    //quit
    draw_sprite_ext(spr_quit,quitindx,(21+quit),205,1,1,0,c_white,1);
    } else if(quitoptions = true) {
    //don't quit
    draw_sprite_ext(spr_dontquit,dontquitindx,(21+dontquit),171,1,1,0,c_white,1);
    //save and quit
    draw_sprite_ext(spr_save,saveandquitindx,(21+saveandquit),188,1,1,0,c_white,1);
    //just quit
    draw_sprite_ext(spr_justquit,justquitindx,(21+justquit),205,1,1,0,c_white,1);
    }
    }
    //d3d_set_projection_ortho(0, 0, global.gamewidth, global.gameheight, 0);
    //draw_text(0,0,"hi");

    
    
    draw_surface_ext(application_surface,0,0,.5+scale,.5+scale,0,c_white,1);
    
        var xcon = obj_camera_management.x+dcos(global.dir+90);
        var ycon = obj_camera_management.y-dsin(global.dir+90);
        var zcon = obj_camera_management.z-dsin(global.pitch);
    
    
    if(instance_exists(obj_nmp_entrance) &amp;&amp; global.nmpicon) {
        Convert_Prepare(obj_camera_management.x , obj_camera_management.y , obj_camera_management.z , xcon,ycon,zcon, 0,0,1, global.fov ,global.gamewidth/global.gameheight);
        Convert_3d(0,clamp(0,0,obj_camera_management.y),32,obj_camera_management.x,obj_camera_management.y,obj_camera_management.z)
        draw_sprite_ext(spr_navigation,0,clamp(x_2d,8,320-8)*(.5+scale),clamp(y_2d,8,240-8)*(.5+scale),(.5+scale),(.5+scale),0,c_white,1);
    }
    
    if(instance_exists(obj_trap_door) &amp;&amp; global.nmpicon) {
        Convert_Prepare(obj_camera_management.x , obj_camera_management.y , obj_camera_management.z , xcon,ycon,zcon, 0,0,1, global.fov ,global.gamewidth/global.gameheight);
        Convert_3d(obj_trap_door.x-32,clamp(obj_trap_door.y,obj_trap_door.y,obj_camera_management.y),32,obj_camera_management.x,obj_camera_management.y,obj_camera_management.z)
        draw_sprite_ext(spr_navigation,1,clamp(x_2d,8,320-8)*(.5+scale),clamp(y_2d,8,240-8)*(.5+scale),(.5+scale),(.5+scale),0,c_white,1);
    }
    
    
    /*//p2talk
        Convert_Prepare(obj_camera_management.x , obj_camera_management.y , obj_camera_management.z , xcon,ycon,zcon, 0,0,1, global.fov ,global.gamewidth/global.gameheight);
        Convert_3d(obj_player_rpg.x,obj_player_rpg.y,obj_player_rpg.z+(2.2*32),obj_camera_management.x,obj_camera_management.y,obj_camera_management.z)
            draw_set_halign(fa_center);
            draw_set_valign(fa_bottom);
            draw_set_color(c_white);
            //draw_set_alpha(abs(scr_sine(1,1)));
            
            if(!instance_exists(obj_p2talk) &amp;&amp; !instance_exists(obj_fade) &amp;&amp; room != rm_bootup &amp;&amp; room != rm_title) {
                instance_create(0,0,obj_p2talk);
            } 
            
            if(instance_exists(obj_p2talk)) {    
                
                var btnh = string_height("A")
                draw_set_font(btnfnt);
                var badd = string_height("0")
                draw_text_transformed(x_2d*(.5+scale),(y_2d+btnh)*(.5+scale),obj_p2talk.btn_disp,(.5+scale),(.5+scale),0);
                draw_set_font(fnt_petscop);
            
                var i;
                for (i = 0; i &lt; ds_list_size(obj_p2talk.button_input); i += 1)
                {
                
                if(ds_list_find_value(obj_p2talk.alpha,i) &lt; 1) {
                ds_list_replace(obj_p2talk.alpha,i,ds_list_find_value(obj_p2talk.alpha,i)+(1/30));
                } else {
                ds_list_replace(obj_p2talk.alphasub,i,ds_list_find_value(obj_p2talk.alphasub,i)-(1/208));
                }
                
                if(ds_list_find_value(obj_p2talk.height,i) &lt; (i+1)*17) {
                ds_list_replace(obj_p2talk.height,i,ds_list_find_value(obj_p2talk.height,i)+(17/30));
                }
                //ds_list_delete(obj_p2talk.button_input,i);
                
                draw_set_alpha(ds_list_find_value(obj_p2talk.alpha,i) + ds_list_find_value(obj_p2talk.alphasub,i));
            
                draw_text_transformed(x_2d*(.5+scale),(y_2d-ds_list_find_value(obj_p2talk.height,i)+(badd*.4)+3)*(.5+scale),scr_p2_talk_converter(ds_list_find_value(obj_p2talk.button_input,i)),(.5+scale),(.5+scale),0);
                
                draw_set_alpha(1);
                //draw_text_transformed(x_2d*(.5+scale),(y_2d-ds_list_find_value(obj_p2talk.height,i)+(badd*.4))*(.5+scale),"Plays",(.5+scale),(.5+scale),0);
                if(ds_list_find_value(obj_p2talk.alphasub,i) &lt;= -1) {
                ds_list_delete(obj_p2talk.button_input,i);
                ds_list_delete(obj_p2talk.alpha,i);
                ds_list_delete(obj_p2talk.height,i);
                ds_list_delete(obj_p2talk.alphasub,i);
                }
                
                
                }   
        
            }
                        
            //draw_text_transformed(x_2d*(.5+scale),y_2d*(.5+scale),"egg",(.5+scale),(.5+scale),0);
            draw_set_alpha(1);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    //p2end*/
    
    if(!instance_exists(obj_p2talk) &amp;&amp; !instance_exists(obj_fade) &amp;&amp; room != rm_bootup &amp;&amp; room != rm_title) {
                instance_create(0,0,obj_p2talk);
            } 
    
    if(instance_exists(obj_caught)) {
        if (obj_caught.caught) {
            draw_sprite_ext(spr_caught,0,(160-( dcos( 90 + (min(90,obj_caught.caughttimer)*4))*32))*(.5+scale),120*(.5+scale),obj_caught.caughtscale*(.5+scale),obj_caught.caughtscale*(.5+scale),-obj_caught.caughtrotation,c_white,obj_caught.caughtalpha)
        }
    }
    //fpsgui
    if(instance_exists(obj_player_fps)) {
    draw_sprite_ext(spr_fps_tool,obj_player_fps.image_index,(obj_player_fps.xtool+obj_player_fps.shifter)*(.5+scale),(obj_player_fps.ytool)*(.5+scale),.5+scale,.5+scale,0,c_white,1)
    }
    
    //draw_sprite_ext(spr_buttons,0,0,0,1,1,0,c_white,1)
    if(scale = 0) {
    draw_sprite(spr_menu,1,0,0);
    }
    
    if(bookmenu= true) {
        draw_sprite_ext(spr_backdrop,0,0,0,1,1,0,c_white,1);
        draw_set_font(fnt_petscop);
        draw_set_colour(make_colour_rgb(0,0,0))
        draw_set_halign(fa_middle);
        draw_text(global.gamewidth/2, scroll, "Credits")
        /*draw_set_font(fnt_petscop);
        draw_set_valign(fa_middle);
        draw_text(room_width/2,y,"TEST CREDITS")*/
    }
    
    if(petsmenu = true) {
    //resume
    draw_sprite_ext(spr_resume,resumeindx,(21+resume),137,1,1,0,c_white,1);
    //options
    draw_sprite_ext(spr_options,optionsindx,(21+options),154,1,1,0,c_white,1);
    //pets
    draw_sprite_ext(spr_pets,petsindx,(21+pets),171,1,1,0,c_white,1);
    //book
    draw_sprite_ext(spr_book,bookindx,(21+book),188,1,1,0,c_white,1);
    //quit
    draw_sprite_ext(spr_quit,quitindx,(21+quit),205,1,1,0,c_white,1);
    if(fade_state = 3 || fade_state = 2) {
    //if not fading!
    draw_sprite(spr_backdrop,0,0,0);
    }
    
    if(fade_state = 2 || fade_state = 3) {
    //draw_sprite(example,0,0,0);
    if(cely &lt; 3) {
    
    //amber
    scr_draw_pet_menu(8,-2,spr_amber_pet_menu,ds_grid_get(petgrid, 0, 0),panim,obj_amber);
    //pen
    scr_draw_pet_menu(8,54,spr_pen_pet_menu,ds_grid_get(petgrid, 0, 1),panim,obj_pen);
    //roneth
    scr_draw_pet_menu(8,110,spr_roneth_pet_menu,ds_grid_get(petgrid, 0, 2),panim,obj_roneth);
    
    //randice
    scr_draw_pet_menu(144,-2,spr_randice_pet_menu,ds_grid_get(petgrid, 1, 0),panim,obj_PET);
    //toneth
    scr_draw_pet_menu(144,54,spr_toneth_pet_menu,ds_grid_get(petgrid, 1, 1),panim,obj_PET);
    //wavey
    scr_draw_pet_menu(144,110,spr_wavey_pet_menu,ds_grid_get(petgrid, 1, 2),panim,obj_PET);
    } else {
    //care A
    scr_draw_pet_menu(8,-2,spr_carea_pet_menu,ds_grid_get(petgrid, 0, 3),panim,obj_PET);
    //care NLM
    scr_draw_pet_menu(8,54,spr_carenlm_pet_menu,ds_grid_get(petgrid, 0, 4),panim,obj_PET);
    
    //care B
    scr_draw_pet_menu(144,-2,spr_careb_pet_menu,ds_grid_get(petgrid, 1, 3),panim,obj_PET);
    //belle unused
    scr_draw_pet_menu(144,54,spr_null_pet_menu,ds_grid_get(petgrid, 1, 4),panim,obj_PET);
    }
    
    }
    
    
    draw_sprite_ext(spr_fade_menu,0,79,171,1,1,0,c_white,fade_nb);
    draw_sprite_ext(spr_fade_menu,0,0,0,1,1,0,c_white,fade_all);
    }
    
    draw_set_colour(c_white);
    draw_set_halign(fa_middle);
    draw_set_valign(fa_center);
    draw_set_font(fnt_petscop);
    var roty = sin((global.t/4)*0.25)*10
    var rotz = sin((global.t/4)*0.2)*2
    //fades
    
    if(instance_exists(obj_locker_active)) {
        draw_sprite(spr_lock_big,obj_locker_active.unlock,160,120);
    
        draw_set_colour(make_colour_hsv(160,0,116));
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_font(cal_and_locker);
        
        draw_text_transformed(160+lengthdir_x(32,obj_locker_active.locknum),146+lengthdir_y(32,obj_locker_active.locknum),"10",1,1,obj_locker_active.locknum-90);//
        draw_text_transformed(160+lengthdir_x(32,obj_locker_active.locknum+45),146+lengthdir_y(32,obj_locker_active.locknum+45),"5",1,1,obj_locker_active.locknum+45-90);//
        draw_text_transformed(160+lengthdir_x(32,obj_locker_active.locknum+90),146+lengthdir_y(32,obj_locker_active.locknum+90),"0",1,1,obj_locker_active.locknum+90-90);//
        draw_text_transformed(160+lengthdir_x(32,obj_locker_active.locknum+90+45),146+lengthdir_y(32,obj_locker_active.locknum+90+45),"35",1,1,obj_locker_active.locknum+90+45-90);
        draw_text_transformed(160+lengthdir_x(32,obj_locker_active.locknum+90+90),146+lengthdir_y(32,obj_locker_active.locknum+90+90),"30",1,1,obj_locker_active.locknum+90+90-90);
        draw_text_transformed(160+lengthdir_x(32,obj_locker_active.locknum+90+90+45),146+lengthdir_y(32,obj_locker_active.locknum+90+90+45),"25",1,1,obj_locker_active.locknum+90+90+45-90);//
        draw_text_transformed(160+lengthdir_x(32,obj_locker_active.locknum+90+90+90),146+lengthdir_y(32,obj_locker_active.locknum+90+90+90),"20",1,1,obj_locker_active.locknum+90+90+90-90);//
        draw_text_transformed(160+lengthdir_x(32,obj_locker_active.locknum+90+90+90+45),146+lengthdir_y(32,obj_locker_active.locknum+90+90+90+45),"15",1,1,obj_locker_active.locknum+90+90+90+45-90);//
        draw_set_color(c_white);
        //draw_text(160,120,string(obj_locker_active.y/9));
        //draw_text(160,130,obj_locker_active.code);
    }
    
    if(instance_exists(obj_end_demo)) {
    draw_sprite_ext(spr_fade,0,0,0,1,1,0,c_black,obj_end_demo.alp);
    }
    
    
    if(instance_exists(obj_fade)) {
    if(obj_fade.fade_color = c_white) {
    }
        draw_sprite_ext(spr_fade,0,0,0,1,1,0,obj_fade.fade_color,obj_fade.alpha);
        
        if(obj_fade.fade_spr != 0 &amp;&amp; obj_fade.alpha &gt;= 1 &amp;&amp; obj_fade.count &gt; obj_fade.fadein*2 &amp;&amp; obj_fade.count &lt; obj_fade.transition_time-(obj_fade.fadeout*2)) {
        draw_sprite(spr_fade,obj_fade.fade_spr,0,0);
        }
        
    }
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
//draw_text(0,0,"x "+string(obj_player_rpg.x));
//draw_text(0,20,"y "+string(obj_player_rpg.y));
//draw_text(0,40,"z "+string(obj_player_rpg.z));
    
    draw_sprite_ext(spr_debug,0,0,0,1,1,0,c_white,.4);
    
    //always overlays
    
    //nifty
    if(instance_exists(obj_nifty)) {
        if(surface_exists(obj_nifty.niftydisplay)) {
            //draw black bg
            draw_rectangle_colour(0,0,1000,1000,c_black,c_black,c_black,c_black,false);
            //draw surf
            draw_surface(obj_nifty.niftydisplaytrans,32-obj_nifty.lrpos,obj_nifty.udpos);
            draw_surface(obj_nifty.niftydisplay,32-obj_nifty.lrpos,obj_nifty.udpos);
            //draw border
            draw_background(nifty_sides,0,0);
            //draw pencil
            draw_sprite(spr_nifty_pencil,obj_nifty.pensprite,floor(obj_nifty.penx)+32,floor(obj_nifty.peny)+1);
        }
    }
        if(keyboard_check_pressed(vk_end) &amp;&amp; !instance_exists(obj_nifty) &amp;&amp; distance_to_object(obj_door) &gt; 16 &amp;&amp; !instance_exists(obj_fade) &amp;&amp; room != rm_bootup &amp;&amp; !instance_exists(obj_dialogue) &amp;&amp; !instance_exists(obj_tool_txt_box) &amp;&amp; !instance_exists(obj_picture) &amp;&amp; !global.replaying) {
            instance_create(0,0,obj_nifty);
        }
    //endnifty
    
    //draw_sprite_ext(egg,0,0,0,1,1,0,c_white,.4);
    
    //draw_sprite_ext(spr_contest,0,160,16,1,1,roty,c_white,1);
    //draw_text_transformed_colour(160,48,string(global.pieces),1+(bup),1+bup,-roty,make_colour_hsv(global.t,255,255),make_colour_hsv(global.t,255,255),make_colour_hsv(global.t+25,255,255),make_colour_hsv(global.t+25,255,255),bup);
    
    
    
    
    draw_set_halign(fa_left)
    if(room != rm_bootup &amp;&amp; room != rm_title) {

    demotime++;
    
    if(instance_exists(obj_player_fps) &amp;&amp; global.wmark) {
    //draw_sprite(spr_p3d_demo,demotime/30,160,25);
    } else if(global.wmark) {
    //draw_sprite(spr_p3d_demo,demotime/30,160,225);
    }
    }
    draw_set_valign(fa_top)
    draw_set_blend_mode( bm_add );
    //draw_sprite_ext(spr_dark_bars,0,0,0,1,1,0,c_white,.00788);
    draw_set_blend_mode( bm_normal );
    surface_reset_target();
} else {
    surface_set_target(screen1); //Draw what is currently visible to our custom surface
    screen1 = surface_create(global.gamewidth,global.gameheight);
    surface_reset_target();
}

//final surface!
if(surface_exists(final_surface)) {
    surface_set_target(final_surface); //Draw what is currently visible to our custom surface
    
    //take care of ntsc stuff
    if(global.gfx = true) {
        swaptoggle++;
        if swaptoggle = 1 squigliness_invert_value *= -1;
        if swaptoggle &gt;= 2 swaptoggle = 0;
        if(global.ntsc) {
        shader_set(petscop_ntsc);
        texture_set_stage(multiplier_map, sprite_get_texture(mult,0));
        texture_set_stage(squigliness_map, sprite_get_texture(squig,0));
        texture_set_stage(squigliness_map, sprite_get_texture(overlay,0));
        shader_set_uniform_f(squigliness_invert, squigliness_invert_value);
        } else {
        shader_set(sh_CRT_Windows_distortion_and_border);
        
        shader_set_uniform_f(uni_crt_sizes, 320, 240,global.gamewidth*global.zoom, global.gameheight*global.zoom);
        shader_set_uniform_f(distort, var_distort);
        shader_set_uniform_f(distortion, .5);
        shader_set_uniform_f(border, var_border);
        }
        draw_surface_ext(screen1,0,0,2,2,0,c_white,1);
        shader_reset();
        } else {
        draw_surface_ext(screen1,0,0,2,2,0,c_white,1);
        }
        surface_reset_target();
        draw_surface_ext(final_surface,0,0,.5,.5,0,c_white,1);
        
} else {
    surface_set_target(final_surface); //Draw what is currently visible to our custom surface
    final_surface = surface_create(global.gamewidth*2,global.gameheight*2);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
