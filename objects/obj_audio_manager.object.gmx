<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_audio_detector</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///vars
step1 = noone;
step2 = noone;
vol = 0;
z = 0;
echo = 0;
evol = 0;
es1 = noone;
es2 = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///audio


var maxim = global.rad*4.2;
var ref = maxim/2;
var amm = (maxim-ref)/(maxim-ref);

audio_falloff_set_model(audio_falloff_linear_distance_clamped);
if(!instance_exists(obj_player_fps)) {
//make sure all sound items exist!
if(!instance_exists(obj_echo_sounds)) {
instance_create(200000,200000,obj_echo_sounds)
}
if(!instance_exists(obj_evencare_sounds)) {
instance_create(200000,200000,obj_evencare_sounds)
}
if(!instance_exists(obj_stone_sounds)) {
instance_create(200000,200000,obj_stone_sounds)
}
if(!instance_exists(obj_grass_sounds)) {
instance_create(200000,200000,obj_grass_sounds)
}
if(!instance_exists(obj_carpet_sounds)) {
instance_create(200000,200000,obj_carpet_sounds)
}
if(!global.paused) {
if(abs(obj_player_rpg.vspd) &gt; 0 || abs(obj_player_rpg.hspd) &gt; 0) {
    vol = scr_approach(vol,1,.02);
    
        if(place_meeting(x,y,obj_echo_sounds)) {
            /*if(obj_player_rpg.image_index = 1) {
                step1 = audio_play_sound_at(snd_step_echo1,-x,y,z,ref,maxim,amm,false,10);
            }
        
            if(obj_player_rpg.image_index = 3) {
                step2 = audio_play_sound_at(snd_step_echo2,-x,y,z,ref,maxim,amm,false,10);
            }*/
            evol = scr_approach(evol,1,.02);
        } else if(place_meeting(x,y,obj_carpet_sounds)) {
            evol = scr_approach(evol,0,.04);
            if(obj_player_rpg.image_index = 1) {
                step1 = audio_play_sound_at(choose(snd_steps_carpet1,snd_steps_carpet12),-x,y,z,ref,maxim,amm,false,10);
            }
        
            if(obj_player_rpg.image_index = 3) {
                step2 = audio_play_sound_at(choose(snd_steps_carpet2,snd_steps_carpet22),-x,y,z,ref,maxim,amm,false,10);
            }
        } else if(place_meeting(x,y,obj_stone_sounds)) {
            evol = scr_approach(evol,0,.04);
            if(obj_player_rpg.image_index = 1) {
                step1 = audio_play_sound_at(snd_step_stone1,-x,y,z,ref,maxim,amm,false,10);
            }
        
            if(obj_player_rpg.image_index = 3) {
                step2 = audio_play_sound_at(snd_step_stone2,-x,y,z,ref,maxim,amm,false,10);
            }
        } else if(place_meeting(x,y,obj_grass_sounds)) {
            evol = scr_approach(evol,0,.04);
            if(obj_player_rpg.image_index = 1) {
                step1 = audio_play_sound_at(snd_step_grass1,-x,y,z,ref,maxim,amm,false,10);
            }
        
            if(obj_player_rpg.image_index = 3) {
                step2 = audio_play_sound_at(snd_step_grass2,-x,y,z,ref,maxim,amm,false,10);
            }
        } else if(place_meeting(x,y,obj_evencare_sounds)) {
            evol = scr_approach(evol,0,.04);
            if(obj_player_rpg.image_index = 1) {
                step1 = audio_play_sound_at(snd_step_giftplane1,-x,y,z,ref,maxim,amm,false,10);
            }
        
            if(obj_player_rpg.image_index = 3) {
                step2 = audio_play_sound_at(snd_step_giftplane2,-x,y,z,ref,maxim,amm,false,10);
            }
        }
    
} else {   
    vol = scr_approach(vol,0,.04);
    evol = scr_approach(evol,0,.04);
}

if(instance_exists(obj_fade)) {
        if(obj_fade.fade_spr = 0) {
            if(image_index = 1) {
                es1 = audio_play_sound_at(snd_step_echo1,-x,y,z,ref,maxim,amm,false,10);
            }
            
            if(image_index = 3) {
                es2 = audio_play_sound_at(snd_step_echo2,-x,y,z,ref,maxim,amm,false,10);
            }
        } else if(obj_fade.alpha != 1 &amp;&amp; obj_fade.count &lt; obj_fade.transition_time/2){
            if(image_index = 1) {
                es1 = audio_play_sound_at(snd_step_echo1,-x,y,z,ref,maxim,amm,false,10);
            }
            
            if(image_index = 3) {
                es2 = audio_play_sound_at(snd_step_echo2,-x,y,z,ref,maxim,amm,false,10);
            }
        } else if(obj_fade.count &gt; obj_fade.transition_time-obj_fade.fadeout &amp;&amp; (obj_player_rpg.x != obj_player_rpg.xprevious || obj_player_rpg.y != obj_player_rpg.yprevious)) {
            if(image_index = 1) {
                es1 = audio_play_sound_at(snd_step_echo1,-x,y,z,ref,maxim,amm,false,10);
            }
            
            if(image_index = 3) {
                es2 = audio_play_sound_at(snd_step_echo2,-x,y,z,ref,maxim,amm,false,10);
            }
        }
    } else {
        if(image_index = 1) {
            es1 = audio_play_sound_at(snd_step_echo1,-x,y,z,ref,maxim,amm,false,10);
        }
        
        if(image_index = 3) {
            es2 = audio_play_sound_at(snd_step_echo2,-x,y,z,ref,maxim,amm,false,10);
        }
    }

audio_sound_gain(step1,vol,0);
audio_sound_gain(step2,vol,0);
audio_sound_gain(es1,evol,0);
audio_sound_gain(es2,evol,0);
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pos
x = obj_player_rpg.x;
y = obj_player_rpg.y;
z = obj_player_rpg.z;

if(room = rm_evc_5) {
if(obj_player_rpg.x &lt; -64+20.8 &amp;&amp; obj_player_rpg.x &gt; -646.4-20.8 &amp;&amp; obj_player_rpg.y &gt; 160) {
obj_player_rpg.z = 7;
} else if(place_meeting(x,y,obj_treadmill)) {
obj_player_rpg.z = 4;
} else {
obj_player_rpg.z = 0;
}
}

if(vol != 0) {
image_index += 1/8
} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>119</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_path</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>8</kind>
            <path>-1</path>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
