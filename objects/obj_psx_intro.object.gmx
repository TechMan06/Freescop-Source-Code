<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time = 0;
psx_surf = noone;
ntsc = 0;
final_psx = noone;
snd = psx_startup_glitched
audio_sound_gain(snd,0,0);
sound = audio_play_sound(snd,1,false);
audio_sound_gain(snd,1,0);

multiplier_map = shader_get_sampler_index(petscop_ntsc,"mult");
texture_set_stage(multiplier_map, sprite_get_texture(mult,0));

squigliness_map = shader_get_sampler_index(petscop_ntsc,"squig");
texture_set_stage(squigliness_map, sprite_get_texture(squig,0));

squigliness_map = shader_get_sampler_index(petscop_ntsc,"overlay");
texture_set_stage(squigliness_map, sprite_get_texture(overlay,0));

squigliness_invert = shader_get_uniform(petscop_ntsc, "squiginv");
squigliness_invert_value = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(surface_exists(psx_surf)) {
    surface_free(psx_surf);
}
if(surface_exists(final_psx)) {
    surface_free(final_psx);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(time &gt; 390) {
audio_sound_gain(sound,.5,600);
}

time = scr_approach(time,450,.5);
if(time &gt; 449) {
if(!instance_exists(obj_fade)) {
instance_create(0,0,obj_garalina_intro);
instance_destroy();
}
}

if(global.start_pressed) {
if(!instance_exists(obj_fade)) {
var transition = instance_create(0,0,obj_fade);
transition.target_room = rm_title;
transition.fade_color = c_white;
transition.transition_time = 126;
}
if(audio_is_playing(sound)) {
audio_stop_sound(sound);
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(surface_exists(psx_surf)) {
    surface_free(psx_surf);
}
if(surface_exists(final_psx)) {
    surface_free(final_psx);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//psx surface
    shader_reset();
if(surface_exists(psx_surf)) {
    surface_set_target(psx_surf); //Draw what is currently visible to our custom surface

    draw_sprite_ext(spr_psx_intro,clamp(time,0,396),0,0,1,1,0,c_white,1);
        //fades
    if(instance_exists(obj_fade)) {
    if(obj_fade.fade_color = c_white) {
        //draw_set_blend_mode( bm_add );
    }
        draw_sprite_ext(spr_fade,0,0,0,2,2,0,obj_fade.fade_color,obj_fade.alpha);
        draw_set_blend_mode( bm_normal );
    }
    surface_reset_target();
} else {
    surface_set_target(psx_surf); //Draw what is currently visible to our custom surface
    psx_surf = surface_create(global.gamewidth*2,global.gameheight*2);
    surface_reset_target();
}

//final psx surface!
if(surface_exists(final_psx)) {
    surface_set_target(final_psx); //Draw what is currently visible to our custom surface
    //take care of ntsc stuff
    draw_surface_ext(psx_surf,0,0,1,1,0,c_white,1);
    if(global.ntsc = true &amp;&amp; global.gfx = true) {
        squigliness_invert_value *= -1;

        shader_set(petscop_ntsc);
texture_set_stage(multiplier_map, sprite_get_texture(mult,0));
texture_set_stage(squigliness_map, sprite_get_texture(squig,0));
texture_set_stage(squigliness_map, sprite_get_texture(overlay,0));
shader_set_uniform_f(squigliness_invert, squigliness_invert_value);
        draw_surface_ext(psx_surf,0,0,1,1,0,c_white,1);
        shader_reset();
        //draw_sprite_ext(spr_dark_bars,0,0,0,2,2,0,c_white,.0078);
        }
        surface_reset_target();


} else {
    surface_set_target(final_psx); //Draw what is currently visible to our custom surface
    final_psx = surface_create(global.gamewidth*2,global.gameheight*2);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
