<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-8</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_controller</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//control
controller = 0;
shown = false;
h = 0;
//bumpers
global.r2_key = false;
global.r1_key = false;
global.l2_key = false;
global.l1_key = false;
//face buttons
global.square_key = false;
global.action_key = false; //X key
global.circle_key = false; //O key
global.triangle_key = false;
//start and select
global.start_key = false;
global.select_key = false;
global.analog_key = false;
//arrow control
global.right_key = false;
global.left_key = false;
global.up_key = false;
global.down_key = false;

global.ntsc_key = false;

//bumpers
global.r2_pressed = false;
global.r1_pressed = false;
global.l2_pressed = false;
global.l1_pressed = false;
//face buttons
global.square_pressed = false;
global.action_pressed = false; //X key
global.circle_pressed = false; //O key
global.triangle_pressed = false;
//start and select
global.start_pressed = false;
global.select_pressed = false;
global.analog_pressed = false;
//arrow control
global.right_pressed = false;
global.left_pressed = false;
global.up_pressed = false;
global.down_pressed = false;


//bumpers
r2_pressed = 0;
r1_pressed = 0;
l2_pressed = 0;
l1_pressed = 0;
//face buttons
square_pressed = 0;
action_pressed = 0; //X key
circle_pressed = 0; //O key
triangle_pressed = 0;
//start and select
start_pressed = 0;
select_pressed = 0;
analog_pressed = 0;
//arrow control
right_pressed = 0;
left_pressed = 0;
up_pressed = 0;
down_pressed = 0;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input recording
reStep = 0;

global.recording = false;
global.replaying = false;

//record structure
    recordedinputs = ds_list_create();

    skip = false;

//replay struc
    read_demo();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wowah
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get input!
if(!global.replaying) {

if(keyboard_check_pressed(vk_tab) &amp;&amp; alarm[0] &lt;= 0) {
    alarm[0] = 60*6;
}

if(alarm[0] &lt;= 10) {
    shown = false;
} else if(alarm[0] &gt;= 20) {
    shown = true;
}

if(controller &gt; 3) {
controller = 0;
}

if(shown = true) {
    if(keyboard_check_pressed(vk_tab) &amp;&amp; h &gt; 0) {
        controller++;
        alarm[0] = 60*6;
    }
h = scr_approach(h,64,2);
} else {
h = scr_approach(h,-2,2);
}
//ps1 and ps2 controls

if(!global.keyboard) &amp;&amp; (!instance_exists(obj_fade)) {
global.action_key = joystick_check_button(1, 3);
global.triangle_key = joystick_check_button(1, 1);
global.circle_key = joystick_check_button(1, 2);
global.square_key = joystick_check_button(1, 4);
global.start_key = joystick_check_button(1, 10);
global.select_key = joystick_check_button(1, 9);
global.analog_key = joystick_check_button(1, 13) || keyboard_check(vk_tab);
global.r2_key = joystick_check_button(1, 8);
global.r1_key = joystick_check_button(1, 6);
global.l2_key = joystick_check_button(1, 7);
global.l1_key = joystick_check_button(1, 5);
global.right_key = (joystick_xpos(1) &gt;= .5);
global.left_key = (joystick_xpos(1) &lt;= -.5);
global.up_key = (joystick_ypos(1) &lt;= -.5);
global.down_key = (joystick_ypos(1) &gt;= .5);
} else {
global.action_key = keyboard_check(ord('Z'));
global.triangle_key = keyboard_check(ord('D')) || keyboard_check(vk_escape);
global.circle_key = keyboard_check(ord('X'));
global.square_key = keyboard_check(ord('S'));
global.start_key = keyboard_check(vk_enter) || keyboard_check(vk_escape);
global.select_key = keyboard_check(vk_shift);
global.analog_key = keyboard_check(vk_tab);
global.r2_key = keyboard_check(ord('T'));
global.r1_key = keyboard_check(ord('R'));
global.l2_key = keyboard_check(ord('E'));
global.l1_key = keyboard_check(ord('W'));
global.right_key = keyboard_check(vk_right);
global.left_key = keyboard_check(vk_left);
global.up_key = keyboard_check(vk_up);
global.down_key = keyboard_check(vk_down);
}

}

/*
if(joystick_exists(1)) {
global.action_key = joystick_check_button(1, 3);
global.triangle_key = joystick_check_button(1, 1);
global.circle_key = joystick_check_button(1, 2);
global.square_key = joystick_check_button(1, 4);
global.start_key = joystick_check_button(1, 10);
global.select_key = joystick_check_button(1, 9);
global.r2_key = joystick_check_button(1, 8);
global.r1_key = joystick_check_button(1, 6);
global.l2_key = joystick_check_button(1, 7);
global.l1_key = joystick_check_button(1, 5);
global.right_key = (joystick_xpos(1) &gt;= .5);
global.left_key = (joystick_xpos(1) &lt;= -.5);
global.up_key = (joystick_ypos(1) &lt;= -.5);
global.down_key = (joystick_ypos(1) &gt;= .5);
} else if(gamepad_is_connected(4)) {
global.action_key = gamepad_button_check(4,gp_face1);
global.triangle_key = gamepad_button_check(4,gp_face4);
global.circle_key = gamepad_button_check(4,gp_face2);
global.square_key = gamepad_button_check(4,gp_face3);
global.start_key = gamepad_button_check(4,gp_start);
global.select_key = gamepad_button_check(4,gp_select);
global.r2_key = gamepad_button_check(4,gp_shoulderrb);
global.r1_key = gamepad_button_check(4,gp_shoulderr);
global.l2_key = gamepad_button_check(4,gp_shoulderlb);
global.l1_key = gamepad_button_check(4,gp_shoulderl);
global.right_key = gamepad_button_check(4,gp_padr) || gamepad_axis_value(4, gp_axislh) &gt;= .5;
global.left_key = gamepad_button_check(4,gp_padl) || gamepad_axis_value(4, gp_axislh) &lt;= -.5;
global.up_key = gamepad_button_check(4,gp_padu) || gamepad_axis_value(4, gp_axislv) &lt;= -.5;
global.down_key = gamepad_button_check(4,gp_padd) || gamepad_axis_value(4, gp_axislv) &gt;= .5;
} else if(gamepad_is_connected(0)) {
global.action_key = gamepad_button_check(0,gp_face1);
global.triangle_key = gamepad_button_check(0,gp_face4);
global.circle_key = gamepad_button_check(0,gp_face2);
global.square_key = gamepad_button_check(0,gp_face3);
global.start_key = gamepad_button_check(0,gp_start);
global.select_key = gamepad_button_check(0,gp_select);
global.r2_key = gamepad_button_check(0,gp_shoulderrb);
global.r1_key = gamepad_button_check(0,gp_shoulderr);
global.l2_key = gamepad_button_check(0,gp_shoulderlb);
global.l1_key = gamepad_button_check(0,gp_shoulderl);
global.right_key = gamepad_button_check(0,gp_padr) || gamepad_axis_value(0, gp_axislh) &gt;= .5;
global.left_key = gamepad_button_check(0,gp_padl) || gamepad_axis_value(0, gp_axislh) &lt;= -.5;
global.up_key = gamepad_button_check(0,gp_padu) || gamepad_axis_value(0, gp_axislv) &lt;= -.5;
global.down_key = gamepad_button_check(0,gp_padd) || gamepad_axis_value(0, gp_axislv) &gt;= .5;
} else {
global.action_key = keyboard_check(ord('Z'));
global.triangle_key = keyboard_check(ord('D')) || keyboard_check(vk_escape);
global.circle_key = keyboard_check(ord('X'));
global.square_key = keyboard_check(ord('S'));
global.start_key = keyboard_check(vk_enter) || keyboard_check(vk_escape);
global.select_key = keyboard_check(vk_shift);
global.r2_key = keyboard_check(ord('T'));
global.r1_key = keyboard_check(ord('R'));
global.l2_key = keyboard_check(ord('E'));
global.l1_key = keyboard_check(ord('W'));
global.right_key = keyboard_check(vk_right);
global.left_key = keyboard_check(vk_left);
global.up_key = keyboard_check(vk_up);
global.down_key = keyboard_check(vk_down);
}
if (keyboard_check_pressed(ord('R'))) {
room_restart();
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///convert input to pressed
    if(!global.replaying) {
    
    if(global.action_key) {
    action_pressed = scr_approach(action_pressed,2,1);
    } else {
    action_pressed = 0;
    }

    if(action_pressed = 1) {
    global.action_pressed = true;
    } else {
    global.action_pressed = false;
    }
    
    if(global.triangle_key) {
    triangle_pressed = scr_approach(triangle_pressed,2,1);
    } else {
    triangle_pressed = 0;
    }

    if(triangle_pressed = 1) {
    global.triangle_pressed = true;
    } else {
    global.triangle_pressed = false;
    }
    
    if(global.circle_key) {
    circle_pressed = scr_approach(circle_pressed,2,1);
    } else {
    circle_pressed = 0;
    }

    if(circle_pressed = 1) {
    global.circle_pressed = true;
    } else {
    global.circle_pressed = false;
    }

    if(global.square_key) {
    square_pressed = scr_approach(square_pressed,2,1);
    } else {
    square_pressed = 0;
    }

    if(square_pressed = 1) {
    global.square_pressed = true;
    } else {
    global.square_pressed = false;
    }
    
    if(global.start_key) {
    start_pressed = scr_approach(start_pressed,2,1);
    } else {
    start_pressed = 0;
    }

    if(start_pressed = 1) {
    global.start_pressed = true;
    } else {
    global.start_pressed = false;
    }
    
    if(global.select_key) {
    select_pressed = scr_approach(select_pressed,2,1);
    } else {
    select_pressed = 0;
    }

    if(select_pressed = 1) {
    global.select_pressed = true;
    } else {
    global.select_pressed = false;
    }
    
    if(global.analog_key) {
    analog_pressed = scr_approach(analog_pressed,2,1);
    } else {
    analog_pressed = 0;
    }

    if(analog_pressed = 1) {
    global.analog_pressed = true;
    } else {
    global.analog_pressed = false;
    }
    
    
    if(global.r2_key) {
    r2_pressed = scr_approach(r2_pressed,2,1);
    } else {
    r2_pressed = 0;
    }

    if(r2_pressed = 1) {
    global.r2_pressed = true;
    } else {
    global.r2_pressed = false;
    }
    
    if(global.r1_key) {
    r1_pressed = scr_approach(r1_pressed,2,1);
    } else {
    r1_pressed = 0;
    }

    if(r1_pressed = 1) {
    global.r1_pressed = true;
    } else {
    global.r1_pressed = false;
    }
    
    if(global.l1_key) {
    l1_pressed = scr_approach(l1_pressed,2,1);
    } else {
    l1_pressed = 0;
    }

    if(l1_pressed = 1) {
    global.l1_pressed = true;
    } else {
    global.l1_pressed = false;
    }
    
    if(global.l2_key) {
    l2_pressed = scr_approach(l2_pressed,2,1);
    } else {
    l2_pressed = 0;
    }

    if(l2_pressed = 1) {
    global.l2_pressed = true;
    } else {
    global.l2_pressed = false;
    }
    
    if(global.up_key) {
    up_pressed = scr_approach(up_pressed,2,1);
    } else {
    up_pressed = 0;
    }

    if(up_pressed = 1) {
    global.up_pressed = true;
    } else {
    global.up_pressed = false;
    }
    
    if(global.down_key) {
    down_pressed = scr_approach(down_pressed,2,1);
    } else {
    down_pressed = 0;
    }

    if(down_pressed = 1) {
    global.down_pressed = true;
    } else {
    global.down_pressed = false;
    }
    
    if(global.left_key) {
    left_pressed = scr_approach(left_pressed,2,1);
    } else {
    left_pressed = 0;
    }

    if(left_pressed = 1) {
    global.left_pressed = true;
    } else {
    global.left_pressed = false;
    }
    
    if(global.right_key) {
    right_pressed = scr_approach(right_pressed,2,1);
    } else {
    right_pressed = 0;
    }

    if(right_pressed = 1) {
    global.right_pressed = true;
    } else {
    global.right_pressed = false;
    }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///record or replay inputs

if(instance_exists(obj_fade)) {

skip = (obj_fade.fade_spr &gt; 0 &amp;&amp; obj_fade.alpha &gt;= 1) 

} else {
skip = false;
}

//inputs

//replay
if(global.replaying) {
reStep++;
replay_demo();
global.recording = false;
if(joystick_check_button(1, 10) || keyboard_check(vk_enter) || keyboard_check(vk_escape)) {
    if(!instance_exists(obj_end_demo) &amp;&amp; !instance_exists(obj_fade)) {
    instance_create(0,0,obj_end_demo)
    }
}
//record
} else if(global.recording) &amp;&amp; (!instance_exists(obj_fade)) {

reStep++;

if(skip) exit;

//record inputs
//bumpers

if(global.r2_key) {
    var input = string(reStep) + " global.r2_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.r1_key) {
    var input = string(reStep) + " global.r1_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.l2_key) {
    var input = string(reStep) + " global.l2_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.l1_key) {
    var input = string(reStep) + " global.l1_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
//face buttons
if(global.square_key) {
    var input = string(reStep) + " global.square_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.action_key) {
    var input = string(reStep) + " global.action_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.circle_key) {
    var input = string(reStep) + " global.circle_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.triangle_key) {
    var input = string(reStep) + " global.triangle_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
//start and select
if(global.start_key) {
    var input = string(reStep) + " global.start_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.select_key) {
    var input = string(reStep) + " global.select_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.analog_key) {
    var input = string(reStep) + " global.analog_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
//arrow keys
if(global.right_key) {
    var input = string(reStep) + " global.right_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.left_key) {
    var input = string(reStep) + " global.left_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.up_key) {
    var input = string(reStep) + " global.up_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.down_key) {
    var input = string(reStep) + " global.down_key";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}

//pressed//////////

//bumpers
if(global.r2_pressed) {
    var input = string(reStep) + " global.r2_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.r1_pressed) {
    var input = string(reStep) + " global.r1_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.l2_pressed) {
    var input = string(reStep) + " global.l2_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.l1_pressed) {
    var input = string(reStep) + " global.l1_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
//face buttons
if(global.square_pressed) {
    var input = string(reStep) + " global.square_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.action_pressed) {
    var input = string(reStep) + " global.action_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.circle_pressed) {
    var input = string(reStep) + " global.circle_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.triangle_pressed) {
    var input = string(reStep) + " global.triangle_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
//start and select
if(global.start_pressed) {
    var input = string(reStep) + " global.start_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.select_pressed) {
    var input = string(reStep) + " global.select_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.analog_pressed) {
    var input = string(reStep) + " global.analog_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
//arrow presseds
if(global.right_pressed) {
    var input = string(reStep) + " global.right_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.left_pressed) {
    var input = string(reStep) + " global.left_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.up_pressed) {
    var input = string(reStep) + " global.up_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
if(global.down_pressed) {
    var input = string(reStep) + " global.down_pressed";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//record input
if(global.recording) {
    var input = string(reStep) + " end_demo";
    ds_list_add(recordedinputs,input);
    show_debug_message(input);
save_demo();
}

ds_exists(replayinputs,ds_type_map) {
ds_map_destroy(replayinputs);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_purple);
draw_text(128,120,string(round((obj_player_rpg.y)/32)*32));
draw_text(128,140,string(round((obj_player_rpg.x)/32)*32));
draw_text(128,180,string(round(obj_player_rpg.y)));
draw_text(128,200,string(round(obj_player_rpg.x)));
/*draw_text(8,32,string(obj_player_rpg.acc));
draw_text(8,100,string(obj_player_rpg.dir));
draw_text(8,135,string(obj_player_rpg.xaxis));
draw_text(8,145,string(obj_player_rpg.yaxis));*/
draw_text(8,32,string(ceil((obj_player_rpg.xaxis+obj_player_rpg.yaxis)/2)));
//draw_text(160,116,string(reStep));
//draw_sprite(spr_controllers,controller,2,238-h);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
